<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Spring面试题</title>
      <link href="/2022/02/23/Spring%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
      <url>/2022/02/23/Spring%E9%9D%A2%E8%AF%95%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h1 id="Spring系列面试题"><a href="#Spring系列面试题" class="headerlink" title="Spring系列面试题"></a>Spring系列面试题</h1><h2 id="Spring框架是什么？"><a href="#Spring框架是什么？" class="headerlink" title="Spring框架是什么？"></a>Spring框架是什么？</h2><p>Spirng是轻量级的控制反转IOC和AOP的容器框架。</p><p>1.入侵性低（可以直接使用spring框架来写业务代码，依赖框架度低）。</p><p>2.控制反转IOC来达到松耦合的一个目的。</p><p>3.AOP面向切面：在运行时，动态地将代码切入类的指定方法，指定位置上的编程思想。</p><p>4.管理了对象bean的生命周期</p><p>5.可以将很多其他的框架整合到一块</p><h2 id="AOP的理解？"><a href="#AOP的理解？" class="headerlink" title="AOP的理解？"></a>AOP的理解？</h2><p>将我们的业务比如日志、事物、封装成一个切面，注入到具体的业务逻辑中，主要是对某个对象或某些对象功能进行增强，比如对象的功能增强。</p><h2 id="IOC的理解？"><a href="#IOC的理解？" class="headerlink" title="IOC的理解？"></a>IOC的理解？</h2><p>ioc容器概念</p><p>实际上就是一个map集合，里边存着各种对象，在xml配置的bean节点、以及@repository、@Service、@Controller、@Component注解，在项目启动的时候会读取配置文件的bean节点，根据全限定类名读取到map里，还有扫描到类上有注解的也会通过反射来创建对象放到map集合中。</p><p>这个时候就有各种对象了，如果我们的业务代码需要用到对象时，使用DI注入（Atuowired、resource）等注解，xml里bean节点的ref属性根据id注入，也会扫描这注解根据类型、id注入（id就是对象名）。</p><p>控制反转：全部对象的控制权上交IOC容器</p><p>依赖注入：获得依赖的对象被反转了，自身管理对象变为了IOC容器自动注入，依赖注入是实现IOC的方法，在IOC容器运行期间，动态地将某种依赖关系注入到对象中。</p><h2 id="BeanFactory和ApplicationContext有什么区别？"><a href="#BeanFactory和ApplicationContext有什么区别？" class="headerlink" title="BeanFactory和ApplicationContext有什么区别？"></a>BeanFactory和ApplicationContext有什么区别？</h2><h2 id="简述Spring-bean的生命周期？"><a href="#简述Spring-bean的生命周期？" class="headerlink" title="简述Spring bean的生命周期？"></a>简述Spring bean的生命周期？</h2><h2 id="Spring-支持Bean的作用域？"><a href="#Spring-支持Bean的作用域？" class="headerlink" title="Spring 支持Bean的作用域？"></a>Spring 支持Bean的作用域？</h2><h2 id="Spring-框架的单例Bean是安全的吗？"><a href="#Spring-框架的单例Bean是安全的吗？" class="headerlink" title="Spring 框架的单例Bean是安全的吗？"></a>Spring 框架的单例Bean是安全的吗？</h2><h2 id="Spring框架运用了哪些设计模式及应用场景？"><a href="#Spring框架运用了哪些设计模式及应用场景？" class="headerlink" title="Spring框架运用了哪些设计模式及应用场景？"></a>Spring框架运用了哪些设计模式及应用场景？</h2><h2 id="Spring事物的实现方式原理以及隔离级别？"><a href="#Spring事物的实现方式原理以及隔离级别？" class="headerlink" title="Spring事物的实现方式原理以及隔离级别？"></a>Spring事物的实现方式原理以及隔离级别？</h2><h2 id="Spring事物的传播机制？"><a href="#Spring事物的传播机制？" class="headerlink" title="Spring事物的传播机制？"></a>Spring事物的传播机制？</h2><h2 id="Spring事物什么时候会失效？"><a href="#Spring事物什么时候会失效？" class="headerlink" title="Spring事物什么时候会失效？"></a>Spring事物什么时候会失效？</h2><h2 id="什么时候Bean是自动装配的有哪些方式？"><a href="#什么时候Bean是自动装配的有哪些方式？" class="headerlink" title="什么时候Bean是自动装配的有哪些方式？"></a>什么时候Bean是自动装配的有哪些方式？</h2>]]></content>
      
      
      <categories>
          
          <category> Java面试总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java面试总结 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java集合面试题</title>
      <link href="/2022/02/21/Java%E9%9B%86%E5%90%88%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
      <url>/2022/02/21/Java%E9%9B%86%E5%90%88%E9%9D%A2%E8%AF%95%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h3 id="数组的定义"><a href="#数组的定义" class="headerlink" title="数组的定义"></a>数组的定义</h3><p>通过连续的存储空间，存储相同类型元素的集合</p><p>首元素地址+（索引x元素的宽度）=索引</p><p>内存存储:有序，索引：递增有序</p><p>存储内容：固定，随机访问：高效</p><p>当前数组的长度/当前数组元素的个数length</p><p>索引：从0开始，length-1为当前数组的全部索引</p><p>数组的容量不可变：是因为如果重新给变量赋值，会指向新的数组的引用地址</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">int[] ints = new int[]&#123;1,2,3,4&#125;;</span><br><span class="line">System.out.println(ints.length);</span><br><span class="line">String[] strings = &#123;&quot;张三&quot;,&quot;李四&quot;&#125;;</span><br><span class="line">System.out.println(strings.length);</span><br><span class="line">//重新复制不能直接使用&#123;&#125;，必须使用new String</span><br><span class="line">strings=new String[]&#123;&quot;小王&quot;&#125;;数组的长度不可变，strings变量的引用指向了新的数组</span><br><span class="line">System.out.println(+strings.length);</span><br><span class="line">//通过索引获取元素，获取索引为0的元素</span><br><span class="line">System.out.println(strings[strings.length-1]);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="多维数组"><a href="#多维数组" class="headerlink" title="多维数组"></a>多维数组</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">//当前的二维数组指的是这个一维数组的长度是5，每个位置上都是一个长度为2的一维的数组</span><br><span class="line">int[][] array2 = new int[5][2];</span><br></pre></td></tr></table></figure><h3 id="集合Collection"><a href="#集合Collection" class="headerlink" title="集合Collection"></a>集合Collection</h3><h3 id="List-单例集合、有序、元素可重复"><a href="#List-单例集合、有序、元素可重复" class="headerlink" title="List 单例集合、有序、元素可重复"></a>List 单例集合、有序、元素可重复</h3><p>ArrayList：底层是数组，线程不安全，查询快，增删慢</p><p>扩容机制：在JDK1.7的时候，实例化对象之后默认初始化容量为10</p><p>​                    在JDK1.8的时候，实例化对象之后默认初始化容量为0，只有在add的时候才会对数组进行初始化一个为10的容量，每次扩容原来容量的1.5倍，将原来数组的数组原封不动的复制到新的数组里，且将Arraylist的地址指向新数组</p><p>扩容：JDK1.7取余，JDK1.8是位运算右移一位相当于除以2</p><p>关于线程安全的集合类：Vector、Collections.synchronizedList()、原始方法对象+synchronized，CopyOnWriteArrayList</p><h3 id="elementData用transient修饰？"><a href="#elementData用transient修饰？" class="headerlink" title="elementData用transient修饰？"></a>elementData用transient修饰？</h3><ol><li>transient的作用是该属性不参与序列化。</li><li>ArrayList继承了标示序列化的Serializable接口。</li><li>对arrayList序列化的过程中进行了读写安全控制。</li><li>在序列化方法writeObject()方法中可以看到，先用默认写方法，然后将size写出，最后遍历写出elementData，因为该变量是transient修饰的，所有进行手动写出，这样它也会被序列化了。那是不是多此一举呢？ 当然不是，其中有一个关键的modCount, 该变量是记录list修改的次数的，当写入完之后如果发现修改次数和开始序列化前不一致就会抛出异常，序列化失败。这样就保证了序列化过程中是未经修改的数据,保证了序列化安全。</li></ol><p>LinkedList：底层是双向链表、查询慢，增删快，线程不安全</p><p>Linkedlist为什么查询慢，增删快？</p><p>插入和删除只需要改变当前元素的头尾指针，查询需要遍历整个链表直到找到这个元素为止</p><p>LinkedList的查询逻辑</p><p>根据传入的index去判断是否为在0-size区间，如果在这个区间就会进行位移运算，右移一位除以2，判断是在数组的左边还是右边，如果在左边从节结点进行遍历，如果在右节点从最后一个节点进行遍历</p><p>Vector：底层是数组，线程安全，查询快，增删慢</p><p>扩容机制每次扩容原来的2倍（扩容当构造没有capacityIncrement时，一次扩容数组变成原来两倍oldCapacity ，否则每次增加capacityIncrement）</p><p> 删除元素：数组移除某一元素并且移动后，一定要将原来末尾设为null，且有效长度减1。</p><p>Stack基础于Vector也是线程安全的，故其主要操作为push入栈和pop出栈，而栈最大的特点就是LIFO</p><p>Queue：数据结构 先进先出FIFO,从某一段放元素进去的一个容器，取元素只能从另一端取.</p><p>实现类PriorityQueue：，优先队列，其内部支持按照一定的规则对内部元素进行排序。</p><p>Deque:   双端队列 既可以从头部插入也可以从尾部插入，既可以从头部获取，也可以从尾部获取</p><p>实现类ArrayDeque、LinkedList</p><h3 id="Set-单例集合、无序、元素不可重复"><a href="#Set-单例集合、无序、元素不可重复" class="headerlink" title="Set 单例集合、无序、元素不可重复"></a>Set 单例集合、无序、元素不可重复</h3><p>HashSet：基于HashMap实现，底层使用HashMap来存储元素</p><p>LinkedHashSet：LinkedHashSet继承与HashSet，底层是通过LinkedHashMap实现的。</p><p>TreeSet：有序，唯一，底层是红黑树（自平衡的排序二叉数）</p><h3 id="HashMap"><a href="#HashMap" class="headerlink" title="HashMap"></a>HashMap</h3><h4 id="JDK1-7底层实现：-数组-链表"><a href="#JDK1-7底层实现：-数组-链表" class="headerlink" title="JDK1.7底层实现： 数组+链表"></a>JDK1.7底层实现： 数组+链表</h4><p>链表 头插法 向下移动  容量乘以加载因子就是阈值，头插法不会遍历所有的链表，找到直接返回，尾插得遍历所有</p><p>扩容：扩容原来的2倍，将旧的数组转移到先的数组中 ，在扩容的时候有可能会出现死循环死链，扩容的时候用的是头插法，导致数据的顺序发生了变化，最终出现这种情况。扩容是为了链表的长度减少，可以提高查询get的效率</p><p>fash-fail快速失败机制：在遍历元素的时候，该hashmap本来就是线程不安全的，还要进行一个元素的删除，就会发生并发的问题</p><h4 id="JDK1-8HashMap底层实现-数组-链表或红黑树"><a href="#JDK1-8HashMap底层实现-数组-链表或红黑树" class="headerlink" title="JDK1.8HashMap底层实现: 数组+链表或红黑树"></a>JDK1.8HashMap底层实现: 数组+链表或红黑树</h4><p>首先hashMap先从它的底层结构开始说它的底层结构在1.7和1.8版本是有点不一样的，它在1.7的时候底层数据结构是一个数组加上一个单链表，到1.8的时候它就改成了数组加上单链表或者说是一个红黑树的方式.当单链表和红黑树之间的转换，它的单链表的长度大于等于8并且它的hash桶大于等于64的时候，它会将单链表转换为红黑树形式存储，它的红黑树接节点的数量如果是小于等于6的时候，它会重新再转换成一个单链表，这是它底层结构的一个变化，另外关于它hash桶的数量，它的数量默认是16个，它的阈值默认是0.75也就是加载因子.这个还关系到它的扩容！</p><h4 id="HashMap扩容问题"><a href="#HashMap扩容问题" class="headerlink" title="HashMap扩容问题"></a>HashMap扩容问题</h4><p>扩容的时候它是首先会检测数组里元素个数，因为你有一个负载因子的默认值是0.75，它含有的桶数默认是16，它的阈值是16*0.75=12，当它哈希桶占用的容量大于12的时候，它就会触发扩容，它会扩容成之间哈希桶容量的二倍，它会同乘2的N次幂，它会把之前那些元素在进行一次哈希运算，然后填充到新的哈希桶里面，然后按照链表或者红黑树的方式再排列起来.它是这么一个扩容机制.</p><h4 id="hashtale"><a href="#hashtale" class="headerlink" title="hashtale"></a>hashtale</h4><p>加锁：在同时进行put的时候，hash算法之后位置不同想同时插入的情况下，在第一个属性进行put的时候，第二个属性不能同时进行put进去，必须等待第一个put成功之后才可以，</p><h1 id="ConcurrentHashMap"><a href="#ConcurrentHashMap" class="headerlink" title="ConcurrentHashMap"></a>ConcurrentHashMap</h1><h4 id="JDK1-7底层实现"><a href="#JDK1-7底层实现" class="headerlink" title="JDK1.7底层实现:"></a>JDK1.7底层实现:</h4><p>底层结构是数组+链表，机制：采用了分段锁的机制，实现并发操作的更新。其中包含两个重要的核心内部类Segment和HashEntry。</p><p>Segment继承于ReentrantLock用来充当锁的角色，每一个segment锁维护着散列映射表的若干个hash桶（这里的桶指的是链表）。HashEntry用来封装映射表的键值对。</p><h4 id="JDK1-8底层实现"><a href="#JDK1-8底层实现" class="headerlink" title="JDK1.8底层实现"></a>JDK1.8底层实现</h4><p>底层结构是数组+链表或红黑树，机制：抛弃了Segment分段加锁，利用CAS+Synchronized来保证并发更新的安全。</p><p>CAS：比较并交换，在并发不是特别大的情况下，修改它需要先去查这个值，查询出来之后，进行修改，将修改的值进行写入的时候，比较之前查出来结果和原理有没有区别，如果没有区别就是安全的，如果有区别就不是安全的，不是使用直接加锁的方式，在低并发的情况下比较好。</p><p>在大量高并发的情况下缺陷：CAS底层使用了自旋锁，对cpu的消耗还是比较大的，有可能会发生ABA的问题，就是在我第一次读和再读的时候，中间可能被第三个修改并且把这个值改回去了，这个问题可以使用AtomicStampedReference来进行加版本号解决。</p><p>Synchronized：可以用在同步代码块，作用在方法之上的时候，他锁的就是this，如果是静态方法锁的就是它的class对象，Syschronized在jdk1.6之后升级还是很大的，首先是无状态的锁（就是不加锁），到偏向锁，再到轻量级锁，最后到重量级锁。</p><p>1.一般在偏向锁的情况，它就偏向于获得第一个锁的的线程，将这个线程拉到这个锁对象的对象头中，当有其他的线程过来的时候，会立刻结束这个偏向状态。</p><p>2.进而升级成一个轻量级锁，轻量级锁的消失源于虚拟机栈中开辟了一个空间叫Lock Record，将锁对象的Make word写入，尝试将另一个Lock Record 的指针，使用CAS去修改锁对象头的区域，完成一个加锁的过程，他普遍适用于一个低并发的情况，如果锁竞争较激烈的话，会立刻升级为一个重量级锁。</p><p>3.重量锁的话用的是一个互斥的过程，通过对象内部的监视器monitor实现，其中monitor的本质是依赖底层系统的mutex Lock实现，操作系统实现线程之间切换要从用户态切换至内核态，因为同步方法和同步代码块不一样。</p><p> 同步代码块：在编译之后，在代码块的前后会加上两个指令，一个是mointerenter，一个是mointerexit，一个线程过来的时候，它发现它的锁标志是无锁状态，01状态，它会尝试给一个互斥锁对象，对象会跟另一个对象进行关联，就是监视器monitor，会在monitor的一个锁定器加1，并且将monitor的指针写到对象头中表示，并且修改它的锁对象标志位为1 0，就是它的重量级锁的一个标志位，以此完成换锁的过程，并且这个过程是可重入的，因为它每次不会因为出去再进来加锁和释放锁，它每次获取这个锁，让锁记录+1即可，它加完锁之后，当其他的线程过来会检查这个锁对象头中，monitor监视器锁上计数器不为0，它会在monitor监视状态下等待去竞争这个锁，如果之前的操作结束，它就退出开始释放这锁，并且逐步的将加上的锁定释放几次，将计数器清零来完成对锁的一个释放.让其他线程继续去竞争这个锁，这是它重量级锁同步代码块的一个原理。</p><p>同步方法：而是ACC_SYNCHRONIZED标志位，相当于一个flag，当JVM去检测到这样一个flag，它自动去走了一个同步方法调用的策略，这个原理是比较简单的！锁降级基本上就是进入gc的时候了，所以基本不考虑锁降级。</p><p>需要看的？？ReentrantLock重入锁</p><p>首先从JVM层面synchronized是JVM的一个关键字，ReentrantLock其实就是一个类，你需要去手动去编码，synchronized在使用的时候比较简单，直接同步代码块或者直接同步方法，我不需要关心锁的释放，但是ReentrantLock我需要手动的去lock然后配合try finally代码块一定要去把它的锁给释放，另外就是ReentrantLock相比synchronized有几个高级特性，它提供了一个，如果一个线程长期等待不到一个锁的时候，为了防止死锁，可以去手动调用lockInterruptibly方法，尝试去释放这个锁。释放自己的资源不去等待，ReentrantLock提供了一个，可以构造公平锁的一个方式，因为它的构造函数有一个但是不推荐使用，因为它会让ReentrantLock等级下降，它提供了一个condition，可以指定去唤醒绑定到condition身上的线程，来实现选择性通知的一个机制，这是它们之间的一个区别，关于选择性，如果你不需要ReentrantLock的特性的话，还是使用synchronized，因为相比来说synchronized的话，它是JVM层面的关键字，当优化JDK的时候它会非常方便的去了解，当前的锁被那些线程所持有，这个状态的话不是ReentrantLock能相比的，还是synchronized比较好些.</p><p>需要看的问题volatile关键字 ？？</p><p>ConcurrentHashMap第一次put操作</p><p>ConcurrentHashMap在构造函数中只会初始化sizeCtl值（默认为0，用来控制table的初始化和扩容操作）</p><p>sizeCtl默认为0，如果ConcurrentHashMap实例化时有传参数，sizeCtl会是一个2的幂次方的值。所以 执行第一次put操作的线程会执行Unsafe.compareAndSwapInt方法修改sizeCtl为-1，有且只有一个线 程能够修改成功，其它线程通过Thread.yield()让出CPU时间片等待table初始化完成。</p><p>put操作</p><p>1.先通过key的hash值计算出，node节点所在的位置</p><p>2.如果相对应位置的node还未初始化是空的，则通过CAS自旋插入相应的数据。</p><p>3.如果相对位置的node不为空，move的值为-1代表正在扩容，需要同时进行扩容</p><p>如果fn对于=0就是链表</p><p>如果是TreeBin就是红黑树</p>]]></content>
      
      
      <categories>
          
          <category> Java面试总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java面试总结 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis面试题</title>
      <link href="/2022/02/21/Redis%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
      <url>/2022/02/21/Redis%E9%9D%A2%E8%AF%95%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<p>redis是单线程的！Redis基于内存操作的，cpu不是redis的瓶颈，redis是根据机器的内存和网络带宽。</p><h3 id="redis为什么使用单线程还那么快？"><a href="#redis为什么使用单线程还那么快？" class="headerlink" title="redis为什么使用单线程还那么快？"></a>redis为什么使用单线程还那么快？</h3><p>redis是c语言写的，每秒10w+的QPS，完全不比memecache差！</p><p>核心：redis是将所有的数据全部放到内存中，所以说单线程去操作效率是最高的，多线程（CPU上下文的切换，耗时的操作）。对于内存系统来说，没有上下文的切换效率是最高的。多次读写都是在一个cpu上的，这个是最佳的方案。</p><p>redis默认有16的数据库。</p><h3 id="常见的五大数据类型"><a href="#常见的五大数据类型" class="headerlink" title="常见的五大数据类型"></a>常见的五大数据类型</h3><p>Redis-key</p><h3 id="String"><a href="#String" class="headerlink" title="String"></a>String</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">flushdb 删除数据库所有的key</span><br><span class="line"></span><br><span class="line">keys * 查看所有的key</span><br><span class="line"></span><br><span class="line">set key value </span><br><span class="line"></span><br><span class="line">EXISTS判断当前的key值是否存在 </span><br><span class="line"></span><br><span class="line">move name 1 移除当前的key</span><br><span class="line"></span><br><span class="line">EXPIER name 10 设置key的过期时间</span><br><span class="line"></span><br><span class="line">ttl name 查看当前key的剩余时间</span><br><span class="line"></span><br><span class="line">type name 查看当前的数据是什么类型</span><br><span class="line"></span><br><span class="line">incr key 每次加一</span><br><span class="line"></span><br><span class="line">decr key 每次减一</span><br><span class="line"></span><br><span class="line">getrange key 0 3截取字符串 0 -1 截取所有字符串</span><br><span class="line"></span><br><span class="line">setrange key 1 xx 替换指定位置开始的字符串</span><br><span class="line"></span><br><span class="line">步长  incrby key 指定步长</span><br><span class="line"></span><br><span class="line">步减 decrby key 指定步减</span><br><span class="line"></span><br><span class="line">setex 设置过期时间</span><br><span class="line"></span><br><span class="line">setnx  不存在设置（一般在分布锁中使用）</span><br><span class="line"></span><br><span class="line">mset k1 v1 k2 v2同时设置多个值</span><br><span class="line"></span><br><span class="line">mget同时获取多个值</span><br><span class="line"></span><br><span class="line">#对象</span><br><span class="line">mset user:1:name zhangsan user:1:age 15</span><br><span class="line">mget user:1:age user:1:name</span><br><span class="line"></span><br><span class="line">getset 先get后set</span><br><span class="line"></span><br><span class="line">getset db redis  如果不存在值，则返回nil</span><br><span class="line"></span><br><span class="line">getset db redis  如果存在值，获取原来的值，并且设置新的值</span><br><span class="line"></span><br><span class="line">msetnx  k2 v2 k3 v3 原子性操作</span><br><span class="line"></span><br><span class="line">作用：数据库、缓存、消息中间件</span><br></pre></td></tr></table></figure><h3 id="List"><a href="#List" class="headerlink" title="List"></a>List</h3><p>在redis里边我们可以把玩成 栈、队列、阻塞队列</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">List的的命令都是L开头的</span><br><span class="line"></span><br><span class="line">LRANGE list  0-1 查询全部的元素</span><br><span class="line"></span><br><span class="line">LPUST LIST value (将一个值或多个值插入List列表的头部，左边)</span><br><span class="line"></span><br><span class="line">RPUST LIST value (将一个值或多个值插入List列表的头部，右边)</span><br><span class="line"></span><br><span class="line">LPUST LIST 0 -1 (查询当前list集合里边所有的值)</span><br><span class="line"></span><br><span class="line">移除元素</span><br><span class="line"></span><br><span class="line">POPL：移除左边的第一个元素 POPL LIST </span><br><span class="line"></span><br><span class="line">POPR：移除右边的第一个元素POPR LIST</span><br><span class="line"></span><br><span class="line">Lindex list 0 通过下标获取list中的一个值</span><br><span class="line"></span><br><span class="line">Llen 查询当前list的长度</span><br><span class="line"></span><br><span class="line">Lrem list 1移除几个 three值</span><br><span class="line"></span><br><span class="line">trim截断：截取数据 trim list 1 2 （index位置）</span><br><span class="line"></span><br><span class="line">rpoplpush 移除列表的最后一个元素到新的集合中rpoplpush  list otherlist</span><br><span class="line"></span><br><span class="line">lset list 0 value set的时候必须先存在下标，不然会报错，相当于替换值（替换值）</span><br><span class="line"></span><br><span class="line">lset  list 1 other 如果不存在则会报错</span><br><span class="line"></span><br><span class="line">将某个具体的value插入到某个元素的前边或者后面</span><br><span class="line">Linsert list after/before &quot;往什么字段前边插什么值&quot; &quot;插入值的内容&quot;</span><br><span class="line"></span><br><span class="line">小结</span><br><span class="line"></span><br><span class="line">他实际上是一个链表，before node after ，left，right都插入值</span><br><span class="line">如果key不存在，创建新的链表</span><br><span class="line">如果key存在，新增内容</span><br><span class="line">移除所有值，新增内容</span><br><span class="line">如果移除了所有值，空链表，也代表不存在</span><br><span class="line">在两边插入或者改动值，效率最高！中间元素，相对效率低一点</span><br><span class="line">消息队列</span><br></pre></td></tr></table></figure><p>Set</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">sadd set hello (set集合中添加元素)</span><br><span class="line"></span><br><span class="line">smbmbers (查看指定set的所有值)</span><br><span class="line"></span><br><span class="line">sismember set hell (判断某一个值是不是在set中，存在返回1，不存在返回0)</span><br><span class="line"></span><br><span class="line">scard set （获取集合中的内容元素个数）</span><br><span class="line"></span><br><span class="line">srem set &quot;要移除的数据&quot;  （移除元素）</span><br><span class="line"></span><br><span class="line">set无序抽随机</span><br><span class="line"></span><br><span class="line">srandmember set （随机一个set的集合里边的元素）</span><br><span class="line"></span><br><span class="line">spop set （随机移除一个元素）出栈</span><br><span class="line"></span><br><span class="line">smove 集合1 集合2（目标） （将某个集合的元素移动到某个目标的集合）</span><br><span class="line"></span><br><span class="line">差集</span><br><span class="line"></span><br><span class="line">sdiff key1 key2 (找出key1集合和k2集合中的差集)</span><br><span class="line"></span><br><span class="line">sinter key1 key2 （找出key1集合key2集合中的交集）</span><br><span class="line"></span><br><span class="line">sunion key1 key2 （找出key1集合和key2集合中的并集）</span><br><span class="line"></span><br><span class="line">共同的粉丝数可以选用并集</span><br></pre></td></tr></table></figure><p>Hash哈希</p><pre><code>     -Map集合 key-map（value是一个map），和本质的string没有太大的区别</code></pre><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">hset mymap field1 zhangsan （set一个具体的key value）</span><br><span class="line"></span><br><span class="line">hget mymap field1 （获取一个字段值）</span><br><span class="line"></span><br><span class="line">hmset mymap field2 wangwu field3 zhaosi （set多个 key-value）</span><br><span class="line"></span><br><span class="line">hmget mymap field1 field2 field3 （获取多个字段值）</span><br><span class="line"></span><br><span class="line">hgetall mymap （获取全部的数据）</span><br><span class="line"></span><br><span class="line">hdel mymap field1 (删除集合中的keyfield1)</span><br><span class="line"></span><br><span class="line">hlen mymap （查看当前hash字段的长度）</span><br><span class="line"></span><br><span class="line">HEXISTS mymap field1 （判断这个hash的key值，是否在集合中存在，存在返回1，不存在返回0）</span><br><span class="line"></span><br><span class="line">hkeys mymap （可以看到当前hash所有的key值）</span><br><span class="line"></span><br><span class="line">hvalsmymap （可以看到当前hash所有的value值）</span><br><span class="line"></span><br><span class="line">hincrby mymap field1 1 (可以将hash的key值进行自增)</span><br><span class="line"></span><br><span class="line">hsetnx mymap field1 hello (判断当前hash是否存在key，不存在则添加，存在则失败)</span><br><span class="line"></span><br><span class="line">hash适合存储对象，String更适合字符串的存储 </span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Zset（有序集合）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">zrange myset 0 -1（查看zset中所有的元素）</span><br><span class="line"></span><br><span class="line">zadd myset 0 one</span><br><span class="line"></span><br><span class="line">zadd myset 1 two 0、1可以进行排序的关键字段</span><br><span class="line"></span><br><span class="line">zrangebyscore myset -inf +inf  进行排序，无穷小与无穷大</span><br><span class="line"></span><br><span class="line">zrem myset two 移除元素two</span><br><span class="line"></span><br><span class="line">zcard myset 获取集合元素的个数</span><br><span class="line"></span><br><span class="line">zrevrange mset 0 -1 withscores 倒序排序</span><br><span class="line"></span><br><span class="line">zcount myset 1 3计算当前集合区间有多少个元素 </span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="三种特殊类型："><a href="#三种特殊类型：" class="headerlink" title="三种特殊类型："></a>三种特殊类型：</h3><h3 id="geospatial-地理位置空间"><a href="#geospatial-地理位置空间" class="headerlink" title="geospatial 地理位置空间"></a>geospatial 地理位置空间</h3><p>地理位置，朋友之间的距离</p><h3 id="范围查询hyperloglog"><a href="#范围查询hyperloglog" class="headerlink" title="范围查询hyperloglog"></a>范围查询hyperloglog</h3><p>什么是基数？</p><p>不重复的元素</p><p>简介场景？</p><p>网站UV，可以进行统计网站访问的人数，并且占用的内存非常的小</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">PFadd mykey a b c d e f g 创建一组数</span><br><span class="line"></span><br><span class="line">PFMERGE mykey3 mykey mykey2 并集合并两组数</span><br><span class="line"></span><br><span class="line">PFcount mykey3 查看并集数量</span><br></pre></td></tr></table></figure><h3 id="bitmaps"><a href="#bitmaps" class="headerlink" title="bitmaps"></a>bitmaps</h3><p>位存储</p><p>统计用户信息：用来记录打卡</p><h3 id="Redis的基本事物操作"><a href="#Redis的基本事物操作" class="headerlink" title="Redis的基本事物操作"></a>Redis的基本事物操作</h3><p> Redis单条命令是原子性的，但是事物是不保证原子性的。一个事务的命令都会被序列化，在事务执行过程中，会按照顺序进行执行。</p><p>一次性、顺序性、排他性  </p><p>所有的命令在事物中，并没有直接执行。只有发起命令的时候才回去执行。exec命令</p><p>事物的本质是：一组命令的集合. 队列 set set set  执行</p><p>redis的事务</p><p>（1）开启事务 (multi)</p><p>（2）命令入队 (…) </p><p>（3）执行事物 (exec)</p><p>​    锁：redis可以执行乐观锁</p><p>放弃事物 DISCARD</p><p>编译型异常：输入的代码有问题，命令有错，事物中所有的命令都不会被执行。</p><p>运行时异常：在事物中存在语法错误，在执行命令的时候，其他命令是可以正常执行的，错误命令抛出异常其他的命令是可以正常执行。</p><h3 id="锁"><a href="#锁" class="headerlink" title="锁"></a>锁</h3><h3 id="悲观锁"><a href="#悲观锁" class="headerlink" title="悲观锁"></a>悲观锁</h3><p>很悲观，认为什么时候都会出现问题，无论做什么都会加锁。</p><h3 id="乐观锁"><a href="#乐观锁" class="headerlink" title="乐观锁"></a>乐观锁</h3><p>很乐观，认为什么时候也不会出现问题，所以不会上锁，更新数据的时候去判断一下，在此期间是否有人修改过这个数据，version！</p><p>Redis监视测试    </p><p>使用watch做乐观锁的操作</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; set money 100</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; watch money 监视money</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; multi</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379(TX)&gt; decrby money 20</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379(TX)&gt; set out 0</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379(TX)&gt; incrby out 20</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379(TX)&gt; exec，执行之前另外一个线程把money的值进行了更改，这个时候就会导致事务执行失败</span><br><span class="line">(nil)</span><br><span class="line">127.0.0.1:6379&gt; </span><br><span class="line"></span><br><span class="line">-------------------------------------------</span><br><span class="line">(integer) 20</span><br><span class="line">127.0.0.1:6379&gt; unwatch 1.如果发现事务失败，就先解锁</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; watch money 2.获取最新的值，再次监视，select version</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; multi</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379(TX)&gt; decrby money 20</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379(TX)&gt; incrby out 20</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379(TX)&gt; exec 3.比对监视值是否发生了变化，如果没有发生变化，就会执行成功。如果变化了就执行失败。</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Springboot继承redis</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">在springboot2.x之后，原来使用的jedis被替换成了lettuce.</span><br><span class="line"></span><br><span class="line">jedis:采用的是直连的，多个线程操作的话，是不安全的，如果想要避免不安全，使用jedis pool连接池。</span><br><span class="line"></span><br><span class="line">lettuce:采用netty，实例可以在多个线程中共享，不存在线程不安全的情况，可以减少线程的数量，更像NIO模式。</span><br><span class="line"></span><br><span class="line">整合测试</span><br><span class="line"></span><br><span class="line">1.导入依赖</span><br><span class="line"></span><br><span class="line">2.配置连接</span><br><span class="line"></span><br><span class="line">3.测试 </span><br><span class="line"></span><br><span class="line">关于对象的保存需要先进行序列化</span><br></pre></td></tr></table></figure><p>redis的数据是保存在内存中的，断电及失。</p><h3 id="Redis持久化"><a href="#Redis持久化" class="headerlink" title="Redis持久化"></a>Redis持久化</h3><p>Redis是内存数据库，如果不将内存中的数据保存在磁盘中，那么一旦退出服务器,服务器的数据状态也会消失，Redis提供了持久化功能！</p><h3 id="RDB"><a href="#RDB" class="headerlink" title="RDB"></a>RDB</h3><p>在指定的时间间隔内将内存中的数据集快照写入磁盘，也就是Snaoshot快照，它是恢复时将快照文件读取到内存中。</p><p>Redis会单独创建（fork）一个子进程来进行持久化，会先将数据写入到一个临时文件中，待持久化过程都结束了，再用这个临时文件替换上次持久化好的文件。整个过程中，主进程是不进行任何IO操作的，这就确保了极高的性能。如果需要进行大规模数据的恢复，且对于数据恢复的完整性不是非常敏感，那么RDB方式比AOF更加的高效。RDB的缺点是最后一次持久化后的数据可能丢失，我们默认就是RDB，一般情况不需要修改这个配置。</p><p>rdb保存的文件是dump.rdb</p><p>save 60 s 60s内修改5次key就会触发rdb</p><h3 id="RDB的触发机制"><a href="#RDB的触发机制" class="headerlink" title="RDB的触发机制"></a>RDB的触发机制</h3><p>1.save满足的情况下，会自动触发rdb规则。</p><p>2.执行flushdb命令，也会触发我们的rdb规则</p><p>3.退出redis，也会产生dump.rdb文件</p><p>如何恢复RDB文件，只需要将RDB文件放在我们redis启动目录局可以了，redis启动的时候会自动检测dump.rdb恢复其中的数据，需要存放的位置执行命令：config get dir 如果这个目录下存在dump.rdb文件，就会进行恢复。</p><p>优点：</p><p>适合大规模数据恢复</p><p>对数据的完整性要求不高</p><p>缺点：需要一定的时间间隔操作，如果redis宕机了。这个最后一次的数据就没有了</p><p>fork进程的时候，会占用一定的内容空间</p><h3 id="AOF"><a href="#AOF" class="headerlink" title="AOF"></a>AOF</h3><p>将我们所有的命令都记录下来，history，恢复的时候把这个文件全部执行一遍！</p><p>以日志的形式来记录每个操作，将Redis执行过的所有指令记录下来（读操作不记录），只追加文件但不可以写成文件，redis启动之初会读取该文件重新构建数据，换言之，redis重启的话根据日志文件的内容将指令从前到后执行一次以完成数据的恢复工作。</p><p>默认是不开启的，需要手动进行配置</p><p>如果aof的文件被破坏了，需要去手动恢复文件</p><p>优点：</p><p>1.每一次修改都同步，文件的完整性会更加好</p><p>2.每秒同步一次，可能会丢失一秒的数据</p><p>3.从不同步</p><p>缺点：</p><p>1.相对于数据文件来说，aof远远大于rdb，修复的速度也比rdb慢</p><p>2.aof运行效率也比rdb慢，所以我们的redis默认持久化就是rdb</p><h3 id="Redis发布和订阅"><a href="#Redis发布和订阅" class="headerlink" title="Redis发布和订阅"></a>Redis发布和订阅</h3><p>通信 队列 一般可以用来做聊天室之类的功能</p><p> subscribe liule 订阅的频道为liulei</p><p>publish liulei “hello,liulei” 发送消息到liulei频道</p><h3 id="集群环境搭建"><a href="#集群环境搭建" class="headerlink" title="集群环境搭建"></a>集群环境搭建</h3><p>主从复制:指的是将一台服务器的数据复制到其他的Redis服务器，前者称为主节点master/leader.后者称为从节点slave/follower,只能从主节点到单节点，Master为主以写为主，Slave以读为主。</p><p>主从复制的作用：</p><p>1.数据冗余：主从复制实现了数据的热备份，是持久化之外的一种数据的冗余方式</p><p>2.故障恢复：当主节点出现问题的时候，可以从节点提供服务，实现快速的故障恢复，实际是一种服务的冗余。</p><p>3.负载均衡：在主从复制的基础上，配合读写分离，可以从主节点提供写的服务，从节点提供读的服务，即在写数据的时候使用主节点，在读的时候使用从节点，这样可以分担服务器的压力，尤其是在读多写少的场景下，可以大大的提高redis服务器的并发量。</p><p>4.高可用：哨兵模式，在公司中一般使用 一主二从，主从复制是必须使用的，因为在真实的项目中不可能单机使用redis</p><p>info replication查看主从信息的命令 </p><p>主从复制原理：</p><p>Slave启动成功连接到master后会发送一个sync同步命令Master接到命令,启动后台的存盘进程,同时收集所有接收到的用于修改数据集命令,在后台进程执行完毕之后,master将传送整个数据文件到slave,并完成一次完全同步。</p><p>全量复制:而slave服务在接收到数据库文件数据后,将其存盘并加载到内存中。</p><p>增量复制: Master继续将新的所有收集到的修改命令依次传给slave,完成同步但是只要是重新连接master,一次完全同步(全量复制)将被自动执行!我们的数据一定可以在从机中看到!</p><h3 id="哨兵模式"><a href="#哨兵模式" class="headerlink" title="哨兵模式"></a>哨兵模式</h3><p>一主二从 三哨兵</p><h3 id="Redis缓存穿透（查不到数据）和雪崩"><a href="#Redis缓存穿透（查不到数据）和雪崩" class="headerlink" title="Redis缓存穿透（查不到数据）和雪崩"></a>Redis缓存穿透（查不到数据）和雪崩</h3><p>用户去查询一个数据，发现redis内存数据库中没有，也就是没有命中，于是向持久层数据库查询，发现也没有，于是本次查询失败。当用户很多的时候，缓存没有命中（秒杀），于是都去请求了持久层数据库，这会给持久层的数据库造成很大的压力，这时相当于出现了缓存穿透。</p><p>解决方案：</p><p>布隆过滤器</p><p>布隆过滤器是一种数据结构，在控制层先进行校验，不符合则丢弃，从而避免了对底层存储系统的查询压力。</p><p>缓存空对象</p><p>当存储层不命中后，即使返回的空对象也将其缓存起来，同时会设置一个过期的时间，之后访问这个数据将会从缓存中获取，保护了后端数据源</p><h3 id="缓存击穿（量太大，缓存过期）"><a href="#缓存击穿（量太大，缓存过期）" class="headerlink" title="缓存击穿（量太大，缓存过期）"></a>缓存击穿（量太大，缓存过期）</h3><p>概述</p><p>缓存击穿：是指一个key非常热点，在不停的扛着不并发，大并发集中对一个点进行访问，当这个key失效的瞬间，持续的大并发对应一个点进行访问，当这个key在失效的瞬间，持续的大并发就穿破缓存，直接请求数据库。</p><p>在某个key在过期的瞬间，有大量的请求并发访问，这类数据叫热点数据，由于缓存过期，会同时使用数据库来查询最新的数据，并且回写缓存，导致数据库瞬间压力过大。</p><h3 id="缓存击穿解决方案："><a href="#缓存击穿解决方案：" class="headerlink" title="缓存击穿解决方案："></a>缓存击穿解决方案：</h3><p>设置热点数据永不过期</p><p>从缓存层面来讲，没有设置过期时间，所以不会出现key过期后产生的问题。</p><p>加互斥锁</p><p>分布式锁：使用分布式锁，保证对于每个key同时只有一个线程去查询后端服务，其他线程没有获得分布式锁的权限，因此只需要等待即可。这种方式将高并发的压力转移到分布式锁，因此对分布式锁考验很大。</p><h3 id="缓存雪崩"><a href="#缓存雪崩" class="headerlink" title="缓存雪崩"></a>缓存雪崩</h3><p>缓存雪崩,是指在某一个时间段,缓存集中过期失效。</p><p>Redis 启机!产生雪崩的原因之一,比如在写本文的时候,马上就要到双十二零点,很快就会迎来一波抢购,这波商品时间比较集中的放入了缓存,假设缓存一个小时。那么到了凌晨一点钟的时候,这批商品的缓存就都过期了。而对这批商品的访问查询,都落到了数据库上,对于数据库而言,就会产生周期性的压力波峰。于是所有的请求都会达到存储层,存储层的调用量会暴增,造成存储层也会挂掉的情况。</p><p>其实集中过期,倒不是非常致命,比较致命的缓存雪崩,是缓存服务器某个节点宕机或断网。因为自然形成的缓存雪崩,一定是在某个时间段集中创建缓存,这个时候,数据库也是可以顶住压力的。无非就是对数据库产生周期性的压力而已。而缓存服务节点的宕机,对数据库服务器造成的压力是不可预知的,很有可能瞬间就把数据库压垮。</p><h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><h3 id="redis高可用"><a href="#redis高可用" class="headerlink" title="redis高可用"></a>redis高可用</h3><p>这个思想的含义是,既然redis有可能挂掉,那我多增设几台redis,这样一台挂掉之后其他的还可以继续工作,其实就是搭建的集群。</p><h3 id="限流降级"><a href="#限流降级" class="headerlink" title="限流降级"></a>限流降级</h3><p>这个解决方案的思想是,在缓存失效后,通过加锁或者队列来控制读数据库写缓存的线程数量。比如对某个key只允许一个线程查询数据和写缓存,其他线程等待。</p><h3 id="数据预热"><a href="#数据预热" class="headerlink" title="数据预热"></a>数据预热</h3><p>数据加热的含义就是在正式部署之前,我先把可能的数据先预先访问一遍,这样部分可能大量访问的数据就会加载到缓存中。在即将发生大并发访问前手动触发加载缓存不同的key,设置不同的过期时间,让缓存失效的时间点尽量均匀。</p>]]></content>
      
      
      <categories>
          
          <category> Java面试总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java面试总结 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MYSQL进阶复习</title>
      <link href="/2021/11/10/MYSQL%E8%BF%9B%E9%98%B6%E5%A4%8D%E4%B9%A0/"/>
      <url>/2021/11/10/MYSQL%E8%BF%9B%E9%98%B6%E5%A4%8D%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h4 id="1-什么是数据库？什么是数据管理系统-什么是SQL？它们之间的关系是什么？"><a href="#1-什么是数据库？什么是数据管理系统-什么是SQL？它们之间的关系是什么？" class="headerlink" title="1.什么是数据库？什么是数据管理系统?什么是SQL？它们之间的关系是什么？"></a>1.什么是数据库？什么是数据管理系统?什么是SQL？它们之间的关系是什么？</h4><p>数据库：DataBase，简称DB。按照一定格式存储数据的一些文件的组合。顾名思义：存储数据的仓库，实际上就是一堆文件。这些文件中存储了具有特定格式的数据。</p><p>数据库管理系统：DataBaseManagement，简称DBMS。专门用来管理数据中的数据，数据库管理系统可以对数据库中的数据进行增删改查。如MySql，Oracle，MS，SqlServer，DB2，sybase等…</p><p>SQL：结构化查询语句，程序员通过编写SQL语句，DBMS负责执行SQL语句，最终来完成数据库中的数据的增删改查操作.SQL是一套标准，可以应用到各种数据库管理系统中。</p><p>三者之间的关系：数据库管理系统使用SQL语句来对数据库执行增删改查操作。</p><p>DBMS—&gt;SQL—&gt;DB</p><h4 id="2-命令行开启Mysql服务和关闭服务"><a href="#2-命令行开启Mysql服务和关闭服务" class="headerlink" title="2.命令行开启Mysql服务和关闭服务"></a>2.命令行开启Mysql服务和关闭服务</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">net start MySQL 停止 net stop MySQL 停止</span><br></pre></td></tr></table></figure><h4 id="3-mysql常用命令行"><a href="#3-mysql常用命令行" class="headerlink" title="3.mysql常用命令行"></a>3.mysql常用命令行</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">登录mysql -u用户名 -p密码</span><br><span class="line">退出mysql：exit</span><br><span class="line">查看有哪些数据库：show databases; 以英文分号结尾</span><br><span class="line">选择数据库：use test;</span><br><span class="line">创建数据库：create datebase 数据库名;</span><br><span class="line">查看数据库表:show tables;</span><br><span class="line">导入数据：source 路径</span><br><span class="line">查看表结构 describe缩写 desc 表名</span><br><span class="line">查看数据库版本号：select verson();</span><br><span class="line">查看当前数据库：select database();</span><br><span class="line">\c 终止一条sql语句的输入</span><br><span class="line">注：不区分大小，不见分号不执行</span><br></pre></td></tr></table></figure><h4 id="4-数据库中最基本的表单元是表：table，任何一张表都有行和列，行（row）数据记录、列（column）称为字段"><a href="#4-数据库中最基本的表单元是表：table，任何一张表都有行和列，行（row）数据记录、列（column）称为字段" class="headerlink" title="4.数据库中最基本的表单元是表：table，任何一张表都有行和列，行（row）数据记录、列（column）称为字段"></a>4.数据库中最基本的表单元是表：table，任何一张表都有行和列，行（row）数据记录、列（column）称为字段</h4><h4 id="5-SQL语句分类"><a href="#5-SQL语句分类" class="headerlink" title="5.SQL语句分类"></a>5.SQL语句分类</h4><p>DQL：数据查询语句 select </p><p>DML:数据操作语言 insert增，delete删，update改</p><p>DDL:数据定义语言，带create新建表、drop删除、alter修改</p><p>TCL：事物控制，事物提交 commit，事物回滚：rollback；</p><p>DCL：数据控制语言，授权grant、撤销权限revoke</p><h4 id="6-简单查询"><a href="#6-简单查询" class="headerlink" title="6.简单查询"></a>6.简单查询</h4><p>查询一个字段：select 和from是关键字</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span>  字段名 <span class="keyword">from</span> 表名;   </span><br></pre></td></tr></table></figure><p>查询多个字段： 查询字段之间使用,来隔开</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span>   cloumn1，cloumn2 <span class="keyword">from</span> 表名;  </span><br></pre></td></tr></table></figure><p>查询所有字段：第2种方式可读性较差，效率低，不可取，*在运行的时候也会转换为字段。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span><span class="keyword">select</span> 字段名<span class="number">1</span>,字段名<span class="number">2</span> <span class="keyword">from</span> 表名</span><br><span class="line"><span class="number">2.</span><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> 表名</span><br></pre></td></tr></table></figure><h4 id="7-起别名"><a href="#7-起别名" class="headerlink" title="7.起别名"></a>7.起别名</h4><p>使用as关键字</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> 字段名 <span class="keyword">as</span> 别名 <span class="keyword">from</span> 表名</span><br></pre></td></tr></table></figure><p>不适用as关键字</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> 字段名 别名 <span class="keyword">from</span> 表名</span><br></pre></td></tr></table></figure><p>别名关键字中间有空格怎么操作</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1.select 字段名 &#x27;别 名&#x27; from 表名</span><br><span class="line">2.select 字段名 &quot;别 名&quot; from 表名</span><br><span class="line">注：在数据库当中，字符串统一使用单引号括起来，单引号是标准，双引号在oracle中不可以使用，在mysql中可以使用。</span><br></pre></td></tr></table></figure><h4 id="8-条件查询一"><a href="#8-条件查询一" class="headerlink" title="8.条件查询一"></a>8.条件查询一</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">语法格式：<span class="keyword">select</span> </span><br><span class="line">              字段名<span class="number">1</span>，字段名<span class="number">2.</span>...</span><br><span class="line">              <span class="keyword">from</span></span><br><span class="line">              表名</span><br><span class="line">              <span class="keyword">where</span></span><br><span class="line">              条件;</span><br><span class="line">              <span class="operator">=</span> 等于</span><br><span class="line">              <span class="operator">&gt;</span>大于 </span><br><span class="line">              <span class="operator">&lt;</span>小于</span><br><span class="line">              <span class="operator">&lt;=</span>小于等于 </span><br><span class="line">              <span class="operator">=</span>大于等于 </span><br><span class="line">              <span class="operator">!=</span>不等于</span><br><span class="line">              <span class="keyword">and</span>并且</span><br><span class="line">              <span class="keyword">between</span> ... <span class="keyword">and</span> ... 必须遵循左小右大，闭区间</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span>  字段名<span class="number">1</span>，字段名<span class="number">2</span> <span class="keyword">from</span> 表名 <span class="keyword">where</span> 字段名<span class="number">1</span> <span class="operator">=</span>xxx；</span><br><span class="line"><span class="keyword">select</span>  字段名<span class="number">1</span>，字段名<span class="number">2</span> <span class="keyword">from</span> 表名 <span class="keyword">where</span> 字段名<span class="number">1</span> <span class="operator">&gt;</span>xxx <span class="keyword">and</span> 字段名<span class="number">1</span><span class="operator">&lt;</span>xxxx；</span><br><span class="line"><span class="keyword">select</span>  字段名<span class="number">1</span>，字段名<span class="number">2</span> <span class="keyword">from</span> 表名 <span class="keyword">where</span> 字段名<span class="number">1</span> <span class="keyword">between</span> xxx <span class="keyword">and</span> xxx;</span><br></pre></td></tr></table></figure><h4 id="9-条件查询二"><a href="#9-条件查询二" class="headerlink" title="9.条件查询二"></a>9.条件查询二</h4><h5 id="条件为空-is-null"><a href="#条件为空-is-null" class="headerlink" title="条件为空 is null"></a>条件为空 is null</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select 字段名 from 表名 where 字段名 is null;</span><br></pre></td></tr></table></figure><h5 id="条件不为空-is-not-null"><a href="#条件不为空-is-not-null" class="headerlink" title="条件不为空 is not null"></a>条件不为空 is not null</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select 字段名 from 表名 where 字段名 is not null;</span><br></pre></td></tr></table></figure><h5 id="or或者"><a href="#or或者" class="headerlink" title="or或者"></a>or或者</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> 字段名 <span class="keyword">from</span>  表名   <span class="keyword">where</span> 字段名<span class="number">1</span><span class="operator">=</span><span class="string">&#x27;xxx&#x27;</span> <span class="keyword">or</span> 字段名<span class="number">2</span><span class="operator">=</span><span class="string">&#x27;xxx&#x27;</span></span><br><span class="line"><span class="keyword">and</span>和<span class="keyword">or</span>同时出现有优先级问题吗?</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> 字段名 <span class="keyword">from</span> 表名 <span class="keyword">where</span> 字段名<span class="number">1</span> <span class="keyword">and</span> 条件<span class="number">1</span> <span class="keyword">or</span> 条件<span class="number">2</span></span><br><span class="line">注：<span class="keyword">and</span>和<span class="keyword">or</span>如果同时出现，<span class="keyword">and</span>的优先级要高于<span class="keyword">or</span>，如果想让<span class="keyword">or</span>先执行需要加小括号，不确定优先级可以直接加小括号。</span><br><span class="line"><span class="keyword">select</span> 字段名 <span class="keyword">from</span> 表名 <span class="keyword">where</span> 字段名<span class="number">1</span> <span class="keyword">and</span> (条件<span class="number">1</span> <span class="keyword">or</span> 条件<span class="number">2</span>)</span><br></pre></td></tr></table></figure><h5 id="in包含指的是具体的数值-not不包含这些具体的数值"><a href="#in包含指的是具体的数值-not不包含这些具体的数值" class="headerlink" title="in包含指的是具体的数值,not不包含这些具体的数值"></a>in包含指的是具体的数值,not不包含这些具体的数值</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>包含：<span class="keyword">select</span> 字段名 <span class="keyword">from</span> 表名 <span class="keyword">where</span> 字段名 <span class="keyword">in</span> (xxx,xxx);</span><br><span class="line"><span class="number">2.</span>不包含：<span class="keyword">select</span> 字段名 <span class="keyword">from</span> 表名 <span class="keyword">where</span> 字段名 <span class="keyword">not</span> <span class="keyword">in</span> (xxx,xxx);</span><br></pre></td></tr></table></figure><h5 id="like模糊查询"><a href="#like模糊查询" class="headerlink" title="like模糊查询"></a>like模糊查询</h5><p>支持%和下划线匹配，%任意匹配多个字符，下划线表示任意一个字符，都是特殊符号。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">select 字段名 from 表名  where 字段名  like &#x27;%o&#x27;;</span><br><span class="line">select 字段名 from 表名  where 字段名  like &#x27;_o&#x27;;//代表第二个字符是o</span><br><span class="line">如果查询的结果有_,因为_具有特殊意义代表任意一个字符所以在查询的时候需要转义，例：\_</span><br></pre></td></tr></table></figure><h5 id="排序ORDER-BY"><a href="#排序ORDER-BY" class="headerlink" title="排序ORDER BY"></a>排序ORDER BY</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1.指定升序：SELECT 字段名1 FROM 表名 ORDER BY 字段名1 asc；</span><br><span class="line">2.指定降序：SELECT 字段名1 FROM 表名 ORDER BY 字段名1 desc；</span><br></pre></td></tr></table></figure><p>多条件升序、降序</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> 字段名<span class="number">1</span> <span class="keyword">FROM</span> 表名 <span class="keyword">ORDER</span> <span class="keyword">BY</span> 字段名<span class="number">1</span> <span class="keyword">asc</span>，字段名<span class="number">2</span> <span class="keyword">asc</span>；<span class="operator">/</span><span class="operator">/</span>字段<span class="number">1</span>起主导作用，如果字段<span class="number">1</span>相同就会使用字段名<span class="number">2</span>来进行升降序。</span><br></pre></td></tr></table></figure><p>根据字段位置进行排序</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT 字段名1  FROM 表名 ORDER BY 2  该方法作为了解，在开发中不适用，如果列发生变化，该sql就废了</span><br></pre></td></tr></table></figure><p>注：在综合案例中，排序总是在最后执行。</p><h4 id="10-数据处理函数"><a href="#10-数据处理函数" class="headerlink" title="10.数据处理函数"></a>10.数据处理函数</h4><p>数据处理函数又分为单行处理函数和多行处理函数。</p><p>单行处理函数：一个输入对应一个输出。</p><p>多行处理函数：多个输入，对应一个输出。</p><p>单行常见的函数有： </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">lower 转换小写</span><br><span class="line"></span><br><span class="line">upper  转换大写</span><br><span class="line"></span><br><span class="line">substr 取子串 (substr(被截取的字符串，起始下标，截取的长度))</span><br><span class="line">注：起始下标从1开始，没有0</span><br><span class="line">length取长度</span><br><span class="line"></span><br><span class="line">trim去空格</span><br><span class="line"></span><br><span class="line">str_to_data 将字符串转换成日期</span><br><span class="line"></span><br><span class="line">data_format 格式化日期</span><br><span class="line"></span><br><span class="line">format 设置千分位</span><br><span class="line"></span><br><span class="line">rand()生成随机数</span><br><span class="line"></span><br><span class="line">ifnull 可以将null转换成一个具体值</span><br><span class="line">null只要参数运算，最终结果一定是null，为了避免情况，需要使用ifnull函数</span><br><span class="line"></span><br><span class="line">concat字符串 拼接</span><br><span class="line"></span><br><span class="line">case..when..then..when..then..else..end</span><br><span class="line"></span><br><span class="line">case 字段 when当什么时候，then做什么....when当什么时候 ... 其他...</span><br></pre></td></tr></table></figure><h4 id="11-分组函数（多行处理函数）"><a href="#11-分组函数（多行处理函数）" class="headerlink" title="11.分组函数（多行处理函数）"></a>11.分组函数（多行处理函数）</h4><p>多行处理函数，输入多行，输出一行。</p><p>​        count计数</p><p>​        count(具体字段)：标识统计该字段下所有不为NULL的元素的总数</p><p>​        count(*)：统计表中的总行数，只要有一行数据就count++，因为每一行记录不可能都为NULL，一行数据中只要有一列不为NULL，则这行数据就是有效的。</p><p>​        sum 求和</p><p>​        avg平均值</p><p>​        max最大值</p><p>​        min最小值</p><p>​    注：1.分组函数使用的时候，必须先进行分组才可以使用，如果没有分组，整张表是一组数据。</p><p>​            2.分组函数自动忽略null，不需要提前对null值进行处理。</p><p>​            3.分组函数不能只能使用在where子句中</p><h4 id="12-分组查询"><a href="#12-分组查询" class="headerlink" title="12.分组查询"></a>12.分组查询</h4><p>什么是分组查询？</p><p>需要先对一组数据进行分组，然后再对这组数据进行操作。</p><p>如：计算每个部门的工资和？计算每个岗位的平均薪资？找个每个工资岗位的最高薪资?</p><p>关键字的执行顺序：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> </span><br><span class="line">...</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">...</span><br><span class="line"><span class="keyword">where</span></span><br><span class="line">...</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span></span><br><span class="line">...</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span></span><br><span class="line">...</span><br><span class="line">注：以上关键字的顺序不能颠倒。</span><br><span class="line">执行顺序：</span><br><span class="line"><span class="number">1.</span><span class="keyword">from</span></span><br><span class="line"><span class="number">2.</span><span class="keyword">where</span></span><br><span class="line"><span class="number">3.</span><span class="keyword">group</span> <span class="keyword">by</span></span><br><span class="line"><span class="number">4.</span><span class="keyword">select</span></span><br><span class="line"><span class="number">5.</span><span class="keyword">order</span> <span class="keyword">by</span></span><br><span class="line">如果在一条<span class="keyword">select</span>语句中，如果有<span class="keyword">group</span> <span class="keyword">by</span>语句的话，<span class="keyword">select</span>后面只能跟：参与分组的字段名，以及分组函数，其他一律不能跟。</span><br><span class="line"></span><br><span class="line"><span class="keyword">having</span>:对分完组之后的数组进一步过滤，<span class="keyword">having</span>不能单独使用，<span class="keyword">having</span>不能代替<span class="keyword">where</span>，<span class="keyword">having</span>必须联合<span class="keyword">group</span> <span class="keyword">by</span>联合使用</span><br><span class="line">优化策略：<span class="keyword">where</span>和<span class="keyword">having</span>优先选择<span class="keyword">where</span>，<span class="keyword">where</span>完不成不了，选择<span class="keyword">having</span></span><br><span class="line"></span><br><span class="line">总结：</span><br><span class="line">单表查询的执行顺序：执行顺序不能颠倒</span><br><span class="line"><span class="number">1.</span><span class="keyword">from</span> 从某张表中查出数据</span><br><span class="line"><span class="number">2.</span><span class="keyword">where</span>经过<span class="keyword">where</span>条件筛选数据</span><br><span class="line"><span class="number">3.</span><span class="keyword">group</span> <span class="keyword">by</span> 这这些数据进行分组</span><br><span class="line"><span class="number">4.</span><span class="keyword">having</span> 分组之后可以继续使用<span class="keyword">having</span>进行过滤</span><br><span class="line"><span class="number">5.</span><span class="keyword">select</span> 查询出来</span><br><span class="line"><span class="number">6.</span><span class="keyword">order</span> <span class="keyword">by</span> 排序输出</span><br></pre></td></tr></table></figure><p>13.去除重复记录（去重）distinct</p><p>注：原数据库的数据不会被改动，只是查询的结果去重。    </p><p>distinct 字段只能出现在所有字段的前方，可以放在分组函数里边执行。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select  distinct 字段名 from emp；</span><br></pre></td></tr></table></figure><h4 id="13-连接查询"><a href="#13-连接查询" class="headerlink" title="13.连接查询"></a>13.连接查询</h4><h5 id="1-根据语法的年代分类："><a href="#1-根据语法的年代分类：" class="headerlink" title="1.根据语法的年代分类："></a>1.根据语法的年代分类：</h5><p>SQL92：1992年出现的语法</p><p>SQL99：1999年出现的语法</p><p>表的连接方式方式分类：</p><p>​                                        内连接</p><p>​                                                    等值连接                                                    </p><p>​                                                    非等值连接</p><p>​                                                    自连接</p><p>​                                        外连接</p><p>​                                                    左外连接</p><p>​                                                    右外连接</p><p>​                                        全连接（使用较少）</p><p>当两张表进行查询时，没有任何条件的限制，最终查询结果条数，是两张表的乘积，这种现象称为笛卡尔现象，这是一个数学现象。</p><p>怎么避免笛卡尔现象，在连接的时候加条件，满足这个条件的数据被筛选出来。</p><p>select emp.ename from emp,dept where emp.deptno = dept .deptno;  //SQL92语法效率较低</p><p>注：避免笛卡尔现象，表的连接次数越多效率越低，避免表的连接次数。</p><h5 id="2-内连接之等值连接"><a href="#2-内连接之等值连接" class="headerlink" title="2.内连接之等值连接"></a>2.内连接之等值连接</h5><p>内连接语法格式：select 字段名 from 表1 inner join 表 2 on 条件</p><p>此处的inner 可以省略。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select e.ename,d.deptno from emp e inner join dept d on e.deptno=d.deptno;</span><br></pre></td></tr></table></figure><h5 id="3-非等值连接"><a href="#3-非等值连接" class="headerlink" title="3.非等值连接"></a>3.非等值连接</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">select e.ename,e.sal,s.grade from emp e join salgrade s on e.sal between s.losal and s.hisal;</span><br><span class="line">注：on后边的条件不是一个等量关系。 </span><br></pre></td></tr></table></figure><h5 id="4-内连接之自连接"><a href="#4-内连接之自连接" class="headerlink" title="4.内连接之自连接"></a>4.内连接之自连接</h5><p>自连接的技巧：一张表看成两张表</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select a.ename,b.ename,b.empno from emp a join emp b on a.mgr = b.empno;</span><br></pre></td></tr></table></figure><h5 id="5-左外连接"><a href="#5-左外连接" class="headerlink" title="5.左外连接"></a>5.左外连接</h5><p>left outer join….on …. //outer 可以省略加上可读性较强</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select a.ename,b.ename from emp a left outer join emp b on a.mgr =b.empno;</span><br></pre></td></tr></table></figure><h5 id="6-右外连接："><a href="#6-右外连接：" class="headerlink" title="6.右外连接："></a>6.右外连接：</h5><p>right outer join….on…. </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select a.ename,b.ename from emp a right outer join emp b on a.mgr =b.empno;</span><br></pre></td></tr></table></figure><p>注：主表代表查询该主表的全部内容，</p><p>14.三张表、四张表的连接</p><p>语法格式：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">select </span><br><span class="line">     ....</span><br><span class="line">     from</span><br><span class="line">     a</span><br><span class="line">     join</span><br><span class="line">     b</span><br><span class="line">     on</span><br><span class="line">       a表与b表的连接条件</span><br><span class="line">     join </span><br><span class="line">     c</span><br><span class="line">     on</span><br><span class="line">       a表与c表的连接条件</span><br><span class="line">     left join </span><br><span class="line">     d</span><br><span class="line">     on</span><br><span class="line">       a表与d表的连接条件</span><br><span class="line"></span><br><span class="line">注：一条sql中内连接和外连接都可以混合出现。 </span><br></pre></td></tr></table></figure><h4 id="15-子查询"><a href="#15-子查询" class="headerlink" title="15.子查询"></a>15.子查询</h4><p> 什么是子查询，select语句中嵌套select语句，被嵌套的select的语句被称为子查询。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">语法：</span><br><span class="line">select</span><br><span class="line">（select语句）</span><br><span class="line">   from</span><br><span class="line">   （select语句）</span><br><span class="line">   where </span><br><span class="line">     （select语句）</span><br><span class="line">     </span><br><span class="line">where子句中的子查询：select ename,sal from emp where sal &gt;(select min(sal) from emp);</span><br><span class="line"></span><br><span class="line">from子句中的子查询：</span><br><span class="line">from后面的子查询可以将子查询结果当做一张临时表，属于一种编程思想。</span><br><span class="line">select t.job,s.grade,t.avg  from (select job,avg(sal) as avg from emp group by job) t join salgrade s on t.avg between s.losal and s.hisal;</span><br><span class="line"></span><br><span class="line">select子查询</span><br><span class="line">对于select子查询一次只能返回一条结果，如果返回多条就报错。</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="16-union合并查询结果集"><a href="#16-union合并查询结果集" class="headerlink" title="16.union合并查询结果集"></a>16.union合并查询结果集</h4><p>union的效率要高一些，对于表连接来说，每连接一次新表，每一次匹配的次数都是成倍的翻。但是union可以减少匹配的次数，在减少匹配次数的情况下，可以完成两个结果集的拼接。</p><h4 id="17-limit"><a href="#17-limit" class="headerlink" title="17.limit"></a>17.limit</h4><p>limit是将查询结果的一部分取出来，一般使用在分页查询当中。</p><p>完整用法：limit  startIndex，length    startIndex是起始下标，length是长度</p><p>缺省用法：limit 5；取前5代表的是长度</p><p>注:limit是在order by 之后执行的。</p><p>分页公式：limit (pageNo-1)*pageSize,pageSize</p><h4 id="18-表的创建（建表）"><a href="#18-表的创建（建表）" class="headerlink" title="18.表的创建（建表）"></a>18.表的创建（建表）</h4><h5 id="1-建表的语法格式"><a href="#1-建表的语法格式" class="headerlink" title="1.建表的语法格式"></a>1.建表的语法格式</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">create table 表名（</span><br><span class="line"></span><br><span class="line">字段名1 数据类型，</span><br><span class="line"></span><br><span class="line">字段名2 数据类型，</span><br><span class="line"></span><br><span class="line">字段名3 数据类型</span><br><span class="line"></span><br><span class="line">）;</span><br><span class="line">类名：建议以t_或tbl_开始，可读性较强</span><br><span class="line">字段名：见名知意</span><br><span class="line">表名和字段名都属于标识符</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="2-关于数据库的数据类型"><a href="#2-关于数据库的数据类型" class="headerlink" title="2.关于数据库的数据类型"></a>2.关于数据库的数据类型</h5><p>varchar（255）：可变长度的字符串，比较智能节省空间，会根据实际的数据长度动态分配空间。</p><p>char（255）：定长字符串，不管实际的数据长度是多少，分配固定长度的空间是存储数据。使用不恰当的时候可能会导致空间的浪费。</p><p>注：如果字符串是固定的位数可以选择char，如果不固定选择varchar，varchar是动态扩容的，效率低，char是固定的容量，缺点是会导致空间的浪费。</p><p>int（11）：等同于java中的int</p><p>bigint：等同于java中的lang</p><p>float：单精度浮点型数据</p><p>double :双精度浮点型</p><p>data：短日期类型</p><p>datatime：长日期类型</p><p>clob：字符大对象，最多可以存储4个g的字符串，超过255个字符都要选用clob大对象。</p><p>blob：二进制大对象，专门用来存储图片，视频等流媒体数据，插入图片，视频等类型的数据时候需要使用IO流。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">删除表的sql</span><br><span class="line">drop table if exists t_student2;</span><br><span class="line"></span><br><span class="line">drop  table  表名</span><br></pre></td></tr></table></figure><h4 id="19-插入数据-insert"><a href="#19-插入数据-insert" class="headerlink" title="19.插入数据   insert"></a>19.插入数据   insert</h4><p>语法格式：insert into 表名（字段名1，字段名2，字段名3 …）values （值1，值2，值3）;</p><p>字段名要和值一一对应，数量要对应，数据类型要对应</p>]]></content>
      
      
      <categories>
          
          <category> MYSQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MYSQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>逆向小程序</title>
      <link href="/2021/11/08/%E9%80%86%E5%90%91%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
      <url>/2021/11/08/%E9%80%86%E5%90%91%E5%B0%8F%E7%A8%8B%E5%BA%8F/</url>
      
        <content type="html"><![CDATA[<h2 id="前期准备"><a href="#前期准备" class="headerlink" title="前期准备"></a>前期准备</h2><p>蓝叠安卓模拟器：为什么要用模拟器呢?因为反编译小程序的包需要用到ROOT权限所以比较方便，废话不多说开整。</p><p>反编译工具：wxappUnpacker</p><p>ES文件管理器：用来寻找小程序的包</p><p>环境:node.js</p><p>在进行反编译小程序之前要搞清楚它的原理，首先使用安卓模拟器打开微信小程序之后，就会自动下载小程序的包，默认格式为wxapkg为后缀的文件，进入 /data/data/com.tencent.mm/MicroMsg/{数串}/appbrand/pkg/**这个目录下就可以看到，可以根据时间来判断哪个是你刚打开的小程序的包。</p><p><img src="/images/%E9%80%86%E5%90%91%E5%B0%8F%E7%A8%8B%E5%BA%8F1-2.png" alt="image-20211108210524903"></p><h2 id="实现的步骤"><a href="#实现的步骤" class="headerlink" title="实现的步骤"></a>实现的步骤</h2><p>1.打开安卓模拟器，下载微信、qq、ES文件管理器</p><p>2.打开你想要反编译的小程序</p><p>3.去这个目录/data/data/com.tencent.mm/MicroMsg/{数串}/appbrand/pkg/**找到要反编译的包，将包压缩成文件，通过qq文件传输到自己的电脑。</p><p>4.打开wxappUnpacker文件夹，cmd到当前文件夹执行以下命令</p><h3 id="第一步安装依赖包"><a href="#第一步安装依赖包" class="headerlink" title="第一步安装依赖包"></a>第一步安装依赖包</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">npm install esprima</span><br><span class="line">npm install css-tree</span><br><span class="line">npm install cssbeautify</span><br><span class="line">npm install vm2</span><br><span class="line">npm install uglify-es</span><br><span class="line">npm install js-beautify</span><br></pre></td></tr></table></figure><h3 id="第二步执行反编译操作命令"><a href="#第二步执行反编译操作命令" class="headerlink" title="第二步执行反编译操作命令"></a>第二步执行反编译操作命令</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node wuWxapkg.js D:\wxappUnpacker\_-1618246301_29.wxapkg</span><br></pre></td></tr></table></figure><p>执行成功的效果如下图：</p><p><img src="/images/%E9%80%86%E5%90%91%E5%B0%8F%E7%A8%8B%E5%BA%8F1-1.png" alt="image-20211108210453308"></p><h2 id="完结"><a href="#完结" class="headerlink" title="完结"></a>完结</h2><p>成功之后使用微信开发者工具直接打开文件夹即可，接下来就可以看到你想的东西就可以尽情的奔放了。</p>]]></content>
      
      
      <categories>
          
          <category> 爬虫 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 爬虫 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>selenium+phantomjs实现网页截屏</title>
      <link href="/2021/11/08/selenium+phantomjs%E5%AE%9E%E7%8E%B0%E7%BD%91%E9%A1%B5%E6%88%AA%E5%B1%8F/"/>
      <url>/2021/11/08/selenium+phantomjs%E5%AE%9E%E7%8E%B0%E7%BD%91%E9%A1%B5%E6%88%AA%E5%B1%8F/</url>
      
        <content type="html"><![CDATA[<h2 id="1-Maven环境"><a href="#1-Maven环境" class="headerlink" title="1.Maven环境"></a>1.Maven环境</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.seleniumhq.selenium&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;selenium-java&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;3.4.0&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;com.codeborne&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;phantomjsdriver&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.2.1&lt;/version&gt;</span><br><span class="line">    &lt;!-- this will _always_ be behind --&gt;</span><br><span class="line">    &lt;exclusions&gt;</span><br><span class="line">        &lt;exclusion&gt;</span><br><span class="line">            &lt;groupId&gt;org.seleniumhq.selenium&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;selenium-java&lt;/artifactId&gt;</span><br><span class="line">        &lt;/exclusion&gt;</span><br><span class="line">        &lt;exclusion&gt;</span><br><span class="line">            &lt;groupId&gt;org.seleniumhq.selenium&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;selenium-remote-driver&lt;/artifactId&gt;</span><br><span class="line">        &lt;/exclusion&gt;</span><br><span class="line">    &lt;/exclusions&gt;</span><br><span class="line">  &lt;/dependency&gt;</span><br></pre></td></tr></table></figure><h2 id="2-具体实现代码"><a href="#2-具体实现代码" class="headerlink" title="2.具体实现代码"></a>2.具体实现代码</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"> @Override</span><br><span class="line">    public GoodsScreenshotEntity detailsScreenshots(GoodsScreenshotEntity entity) &#123;</span><br><span class="line">        logger.info(&quot;截屏方法开始执行...&quot;);</span><br><span class="line">        //设置必要参数</span><br><span class="line">        DesiredCapabilities dcaps = new DesiredCapabilities();</span><br><span class="line">        //ssl证书支持</span><br><span class="line">        dcaps.setCapability(&quot;acceptSslCerts&quot;, true);</span><br><span class="line">        //截屏支持</span><br><span class="line">        dcaps.setCapability(&quot;takesScreenshot&quot;, true);</span><br><span class="line">        //css搜索支持</span><br><span class="line">        dcaps.setCapability(&quot;cssSelectorsEnabled&quot;, true);</span><br><span class="line">        //js支持</span><br><span class="line">        dcaps.setJavascriptEnabled(true);</span><br><span class="line">        //驱动支持（第二参数表明的是你的phantomjs引擎所在的路径）</span><br><span class="line">        dcaps.setCapability(PhantomJSDriverService.PHANTOMJS_EXECUTABLE_PATH_PROPERTY, &quot;/jessica/spider/phantomjs/phantomjs-2.1.1-linux-x86_64/bin/phantomjs&quot;);//windows/linux环境下phantomjs的路径</span><br><span class="line">        //创建无界面浏览器对象</span><br><span class="line">        PhantomJSDriver driver = new PhantomJSDriver(dcaps);</span><br><span class="line">        //设置隐性等待（作用于全局）</span><br><span class="line">        driver.manage().timeouts().implicitlyWait(1, TimeUnit.SECONDS);</span><br><span class="line">        long start = System.currentTimeMillis();</span><br><span class="line">        //打开页面</span><br><span class="line">        logger.info(&quot;截屏方法执行的url：&quot;+entity.getSource());</span><br><span class="line">        driver.get(entity.getSource());</span><br><span class="line">        try &#123;</span><br><span class="line">            Thread.sleep( 2000);</span><br><span class="line">        &#125; catch (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">//        JavascriptExecutor js = driver;</span><br><span class="line">//        for (int i = 0; i &lt; 33; i++) &#123;</span><br><span class="line">//            js.executeScript(&quot;window.scrollBy(0,1000)&quot;);</span><br><span class="line">//            //睡眠10s等js加载完成</span><br><span class="line">//            Thread.sleep(5 * 1000);</span><br><span class="line">//        &#125;</span><br><span class="line">        //指定了OutputType.FILE做为参数传递给getScreenshotAs()方法，其含义是将截取的屏幕以文件形式返回。</span><br><span class="line">        File srcFile = ((TakesScreenshot) driver).getScreenshotAs(OutputType.FILE);</span><br><span class="line">        String randomImgName = getRandomImgName(entity);</span><br><span class="line">        String objectName = entity.getMallId() + &quot;/&quot; + entity.getVersion() + &quot;/&quot; + randomImgName;</span><br><span class="line">        FileInputStream fis = null;</span><br><span class="line">        ByteArrayOutputStream byte1 = null;</span><br><span class="line">        try &#123;</span><br><span class="line">            fis = new FileInputStream(srcFile);</span><br><span class="line">            byte1 = new ByteArrayOutputStream(fis.available());</span><br><span class="line">            byte[] bytes = new byte[fis.available()];</span><br><span class="line">            int temp;</span><br><span class="line">            while ((temp = fis.read(bytes)) != -1) &#123;</span><br><span class="line">                byte1.write(bytes, 0, temp);</span><br><span class="line">            &#125;</span><br><span class="line">            final String url = ossService.screenshotsUploud(objectName, bytes);</span><br><span class="line">            if (url != null) &#123;</span><br><span class="line">                logger.info(&quot;返回的OSS外链&quot;+url);</span><br><span class="line">                entity.setScreenshot(url);</span><br><span class="line">                entity.setState(ImageState.ok);</span><br><span class="line">                entity.setUploaded(true);</span><br><span class="line">                entity.setDisable(true);</span><br><span class="line">                long time = (System.currentTimeMillis() - start) / (1000);</span><br><span class="line">                logger.info(&quot;截屏成功并上传OSS耗时&quot; + time + &quot;秒， ：&#123;&quot; + &quot;商城ID：&quot; + entity.getMallId() + &quot;&#125;[&quot; + &quot;ID：&quot; + entity.getId() + &quot;][&quot; + &quot;外链: &quot; + url + &quot;]&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            entity.setState(ImageState.fail);</span><br><span class="line">            entity.setUploaded(false);</span><br><span class="line">            long time = (System.currentTimeMillis() - start) / (1000);</span><br><span class="line">            logger.info(&quot;截屏失败耗时&quot; + time + &quot;秒， ：&#123;&quot; + &quot;商城ID：&quot; + entity.getMallId() + &quot;&#125;[&quot; + &quot;ID：&quot; + entity.getId() + &quot;]&quot;);</span><br><span class="line">        &#125;finally &#123;</span><br><span class="line">            try &#123;</span><br><span class="line">                fis.close();</span><br><span class="line">            &#125; catch (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            try &#123;</span><br><span class="line">                byte1.close();</span><br><span class="line">            &#125; catch (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        driver.quit();</span><br><span class="line">        return entity;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="3-OSS上传代码块"><a href="#3-OSS上传代码块" class="headerlink" title="3.OSS上传代码块"></a>3.OSS上传代码块</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">// Endpoint以杭州为例，其它Region请按实际情况填写。</span><br><span class="line">  final String endpoint =&quot;xxx&quot;;</span><br><span class="line">  // 阿里云主账号AccessKey拥有所有API的访问权限，风险很高。强烈建议您创建并使用RAM账号进行API访问或日常运维，请登录RAM控制台创建RAM账号。</span><br><span class="line">  final String accessKeyId =&quot;xxx&quot;;</span><br><span class="line">  final String accessKeySecret =&quot;xxx&quot;;</span><br><span class="line">  final String bucketName =&quot;xxx&quot;;</span><br><span class="line">  /**</span><br><span class="line">   * 截图上传</span><br><span class="line">   * @param objectName 上传的路径/图片名称</span><br><span class="line">   * @param bytes 上传的数据</span><br><span class="line">   * @return result 外链</span><br><span class="line">   */</span><br><span class="line">  public String screenshotsUploud(String objectName,byte[] bytes)&#123;</span><br><span class="line">      String result=null;</span><br><span class="line">      // 创建OSSClient实例。</span><br><span class="line">      OSS ossClient = new OSSClientBuilder().build(endpoint, accessKeyId, accessKeySecret);</span><br><span class="line">      ObjectMetadata obj= new ObjectMetadata();</span><br><span class="line">      obj.setContentType(&quot;image/jpg&quot;);</span><br><span class="line">      PutObjectRequest putObjectRequest = new PutObjectRequest(bucketName, objectName, new ByteArrayInputStream(bytes),obj);</span><br><span class="line">      ossClient.putObject(putObjectRequest);</span><br><span class="line">      Date expiration = new Date(System.currentTimeMillis() + 3600L * 1000 * 24 * 365 * 10);</span><br><span class="line">      URL url = ossClient.generatePresignedUrl(bucketName, objectName, expiration);</span><br><span class="line">      // 关闭OSSClient。</span><br><span class="line">      ossClient.shutdown();</span><br><span class="line">      return url.toString();</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 爬虫 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 爬虫 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GIT常用命令</title>
      <link href="/2021/11/07/GIT%E5%91%BD%E4%BB%A4/"/>
      <url>/2021/11/07/GIT%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<h2 id="1-本地库操作"><a href="#1-本地库操作" class="headerlink" title="1.本地库操作"></a>1.本地库操作</h2><p>本地库初始化，命令：git add</p><p>隐藏的文件查看命令：ls -lA</p><p>查看工作区和暂存区的状态：git states</p><p>将工作区的 新建或修改 的文件提交到暂存区：git add File文件名</p><p>将暂存区中的文件删除：git rm –cached 文件名</p><p>将暂存区的文件提交到本地库：git commit 文件名  || git commit  -m  “第一次提交” 文件名</p><p>总结:第一次提交文件需要先执行git add 文件名进行文件的追踪，如果更改文件内容后进行提交，add操作可执</p><p>行或也可不执行直接进行commit操作</p><h2 id="2-远程库操作"><a href="#2-远程库操作" class="headerlink" title="2.远程库操作"></a>2.远程库操作</h2><p>git remote  -v 查看远程仓库地址是否有别名</p><p>git remote add  仓库地址或者别名 </p><p>git push origin master 推送到分支</p><h2 id="3-ssh免密公私钥生成"><a href="#3-ssh免密公私钥生成" class="headerlink" title="3.ssh免密公私钥生成"></a>3.ssh免密公私钥生成</h2><p>ssh -keygen -t rsa -C <a href="mailto:&#49;&#49;&#48;&#x33;&#48;&#49;&#x31;&#x30;&#51;&#51;&#64;&#x71;&#x71;&#x2e;&#x63;&#x6f;&#109;">&#49;&#49;&#48;&#x33;&#48;&#49;&#x31;&#x30;&#51;&#51;&#64;&#x71;&#x71;&#x2e;&#x63;&#x6f;&#109;</a> 生成公钥私钥</p>]]></content>
      
      
      <categories>
          
          <category> GIT </category>
          
      </categories>
      
      
        <tags>
            
            <tag> GIT </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
