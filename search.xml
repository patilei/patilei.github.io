<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>MYSQL进阶复习</title>
      <link href="/2021/11/10/MYSQL%E8%BF%9B%E9%98%B6%E5%A4%8D%E4%B9%A0/"/>
      <url>/2021/11/10/MYSQL%E8%BF%9B%E9%98%B6%E5%A4%8D%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h4 id="1-什么是数据库？什么是数据管理系统-什么是SQL？它们之间的关系是什么？"><a href="#1-什么是数据库？什么是数据管理系统-什么是SQL？它们之间的关系是什么？" class="headerlink" title="1.什么是数据库？什么是数据管理系统?什么是SQL？它们之间的关系是什么？"></a>1.什么是数据库？什么是数据管理系统?什么是SQL？它们之间的关系是什么？</h4><p>数据库：DataBase，简称DB。按照一定格式存储数据的一些文件的组合。顾名思义：存储数据的仓库，实际上就是一堆文件。这些文件中存储了具有特定格式的数据。</p><p>数据库管理系统：DataBaseManagement，简称DBMS。专门用来管理数据中的数据，数据库管理系统可以对数据库中的数据进行增删改查。如MySql，Oracle，MS，SqlServer，DB2，sybase等…</p><p>SQL：结构化查询语句，程序员通过编写SQL语句，DBMS负责执行SQL语句，最终来完成数据库中的数据的增删改查操作.SQL是一套标准，可以应用到各种数据库管理系统中。</p><p>三者之间的关系：数据库管理系统使用SQL语句来对数据库执行增删改查操作。</p><p>DBMS—&gt;SQL—&gt;DB</p><h4 id="2-命令行开启Mysql服务和关闭服务"><a href="#2-命令行开启Mysql服务和关闭服务" class="headerlink" title="2.命令行开启Mysql服务和关闭服务"></a>2.命令行开启Mysql服务和关闭服务</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">net start MySQL 停止 net stop MySQL 停止</span><br></pre></td></tr></table></figure><h4 id="3-mysql常用命令行"><a href="#3-mysql常用命令行" class="headerlink" title="3.mysql常用命令行"></a>3.mysql常用命令行</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">登录mysql -u用户名 -p密码</span><br><span class="line">退出mysql：exit</span><br><span class="line">查看有哪些数据库：show databases; 以英文分号结尾</span><br><span class="line">选择数据库：use test;</span><br><span class="line">创建数据库：create datebase 数据库名;</span><br><span class="line">查看数据库表:show tables;</span><br><span class="line">导入数据：source 路径</span><br><span class="line">查看表结构 describe缩写 desc 表名</span><br><span class="line">查看数据库版本号：select verson();</span><br><span class="line">查看当前数据库：select database();</span><br><span class="line">\c 终止一条sql语句的输入</span><br><span class="line">注：不区分大小，不见分号不执行</span><br></pre></td></tr></table></figure><h4 id="4-数据库中最基本的表单元是表：table，任何一张表都有行和列，行（row）数据记录、列（column）称为字段"><a href="#4-数据库中最基本的表单元是表：table，任何一张表都有行和列，行（row）数据记录、列（column）称为字段" class="headerlink" title="4.数据库中最基本的表单元是表：table，任何一张表都有行和列，行（row）数据记录、列（column）称为字段"></a>4.数据库中最基本的表单元是表：table，任何一张表都有行和列，行（row）数据记录、列（column）称为字段</h4><h4 id="5-SQL语句分类"><a href="#5-SQL语句分类" class="headerlink" title="5.SQL语句分类"></a>5.SQL语句分类</h4><p>DQL：数据查询语句 select </p><p>DML:数据操作语言 insert增，delete删，update改</p><p>DDL:数据定义语言，带create新建表、drop删除、alter修改</p><p>TCL：事物控制，事物提交 commit，事物回滚：rollback；</p><p>DCL：数据控制语言，授权grant、撤销权限revoke</p><h4 id="6-简单查询"><a href="#6-简单查询" class="headerlink" title="6.简单查询"></a>6.简单查询</h4><p>查询一个字段：select 和from是关键字</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span>  字段名 <span class="keyword">from</span> 表名;   </span><br></pre></td></tr></table></figure><p>查询多个字段： 查询字段之间使用,来隔开</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span>   cloumn1，cloumn2 <span class="keyword">from</span> 表名;  </span><br></pre></td></tr></table></figure><p>查询所有字段：第2种方式可读性较差，效率低，不可取，*在运行的时候也会转换为字段。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span><span class="keyword">select</span> 字段名<span class="number">1</span>,字段名<span class="number">2</span> <span class="keyword">from</span> 表名</span><br><span class="line"><span class="number">2.</span><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> 表名</span><br></pre></td></tr></table></figure><h4 id="7-起别名"><a href="#7-起别名" class="headerlink" title="7.起别名"></a>7.起别名</h4><p>使用as关键字</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> 字段名 <span class="keyword">as</span> 别名 <span class="keyword">from</span> 表名</span><br></pre></td></tr></table></figure><p>不适用as关键字</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> 字段名 别名 <span class="keyword">from</span> 表名</span><br></pre></td></tr></table></figure><p>别名关键字中间有空格怎么操作</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1.select 字段名 &#x27;别 名&#x27; from 表名</span><br><span class="line">2.select 字段名 &quot;别 名&quot; from 表名</span><br><span class="line">注：在数据库当中，字符串统一使用单引号括起来，单引号是标准，双引号在oracle中不可以使用，在mysql中可以使用。</span><br></pre></td></tr></table></figure><h4 id="8-条件查询一"><a href="#8-条件查询一" class="headerlink" title="8.条件查询一"></a>8.条件查询一</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">语法格式：<span class="keyword">select</span> </span><br><span class="line">              字段名<span class="number">1</span>，字段名<span class="number">2.</span>...</span><br><span class="line">              <span class="keyword">from</span></span><br><span class="line">              表名</span><br><span class="line">              <span class="keyword">where</span></span><br><span class="line">              条件;</span><br><span class="line">              <span class="operator">=</span> 等于</span><br><span class="line">              <span class="operator">&gt;</span>大于 </span><br><span class="line">              <span class="operator">&lt;</span>小于</span><br><span class="line">              <span class="operator">&lt;=</span>小于等于 </span><br><span class="line">              <span class="operator">=</span>大于等于 </span><br><span class="line">              <span class="operator">!=</span>不等于</span><br><span class="line">              <span class="keyword">and</span>并且</span><br><span class="line">              <span class="keyword">between</span> ... <span class="keyword">and</span> ... 必须遵循左小右大，闭区间</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span>  字段名<span class="number">1</span>，字段名<span class="number">2</span> <span class="keyword">from</span> 表名 <span class="keyword">where</span> 字段名<span class="number">1</span> <span class="operator">=</span>xxx；</span><br><span class="line"><span class="keyword">select</span>  字段名<span class="number">1</span>，字段名<span class="number">2</span> <span class="keyword">from</span> 表名 <span class="keyword">where</span> 字段名<span class="number">1</span> <span class="operator">&gt;</span>xxx <span class="keyword">and</span> 字段名<span class="number">1</span><span class="operator">&lt;</span>xxxx；</span><br><span class="line"><span class="keyword">select</span>  字段名<span class="number">1</span>，字段名<span class="number">2</span> <span class="keyword">from</span> 表名 <span class="keyword">where</span> 字段名<span class="number">1</span> <span class="keyword">between</span> xxx <span class="keyword">and</span> xxx;</span><br></pre></td></tr></table></figure><h4 id="9-条件查询二"><a href="#9-条件查询二" class="headerlink" title="9.条件查询二"></a>9.条件查询二</h4><h5 id="条件为空-is-null"><a href="#条件为空-is-null" class="headerlink" title="条件为空 is null"></a>条件为空 is null</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select 字段名 from 表名 where 字段名 is null;</span><br></pre></td></tr></table></figure><h5 id="条件不为空-is-not-null"><a href="#条件不为空-is-not-null" class="headerlink" title="条件不为空 is not null"></a>条件不为空 is not null</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select 字段名 from 表名 where 字段名 is not null;</span><br></pre></td></tr></table></figure><h5 id="or或者"><a href="#or或者" class="headerlink" title="or或者"></a>or或者</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> 字段名 <span class="keyword">from</span>  表名   <span class="keyword">where</span> 字段名<span class="number">1</span><span class="operator">=</span><span class="string">&#x27;xxx&#x27;</span> <span class="keyword">or</span> 字段名<span class="number">2</span><span class="operator">=</span><span class="string">&#x27;xxx&#x27;</span></span><br><span class="line"><span class="keyword">and</span>和<span class="keyword">or</span>同时出现有优先级问题吗?</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> 字段名 <span class="keyword">from</span> 表名 <span class="keyword">where</span> 字段名<span class="number">1</span> <span class="keyword">and</span> 条件<span class="number">1</span> <span class="keyword">or</span> 条件<span class="number">2</span></span><br><span class="line">注：<span class="keyword">and</span>和<span class="keyword">or</span>如果同时出现，<span class="keyword">and</span>的优先级要高于<span class="keyword">or</span>，如果想让<span class="keyword">or</span>先执行需要加小括号，不确定优先级可以直接加小括号。</span><br><span class="line"><span class="keyword">select</span> 字段名 <span class="keyword">from</span> 表名 <span class="keyword">where</span> 字段名<span class="number">1</span> <span class="keyword">and</span> (条件<span class="number">1</span> <span class="keyword">or</span> 条件<span class="number">2</span>)</span><br></pre></td></tr></table></figure><h5 id="in包含指的是具体的数值-not不包含这些具体的数值"><a href="#in包含指的是具体的数值-not不包含这些具体的数值" class="headerlink" title="in包含指的是具体的数值,not不包含这些具体的数值"></a>in包含指的是具体的数值,not不包含这些具体的数值</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>包含：<span class="keyword">select</span> 字段名 <span class="keyword">from</span> 表名 <span class="keyword">where</span> 字段名 <span class="keyword">in</span> (xxx,xxx);</span><br><span class="line"><span class="number">2.</span>不包含：<span class="keyword">select</span> 字段名 <span class="keyword">from</span> 表名 <span class="keyword">where</span> 字段名 <span class="keyword">not</span> <span class="keyword">in</span> (xxx,xxx);</span><br></pre></td></tr></table></figure><h5 id="like模糊查询"><a href="#like模糊查询" class="headerlink" title="like模糊查询"></a>like模糊查询</h5><p>支持%和下划线匹配，%任意匹配多个字符，下划线表示任意一个字符，都是特殊符号。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">select 字段名 from 表名  where 字段名  like &#x27;%o&#x27;;</span><br><span class="line">select 字段名 from 表名  where 字段名  like &#x27;_o&#x27;;//代表第二个字符是o</span><br><span class="line">如果查询的结果有_,因为_具有特殊意义代表任意一个字符所以在查询的时候需要转义，例：\_</span><br></pre></td></tr></table></figure><h5 id="排序ORDER-BY"><a href="#排序ORDER-BY" class="headerlink" title="排序ORDER BY"></a>排序ORDER BY</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1.指定升序：SELECT 字段名1 FROM 表名 ORDER BY 字段名1 asc；</span><br><span class="line">2.指定降序：SELECT 字段名1 FROM 表名 ORDER BY 字段名1 desc；</span><br></pre></td></tr></table></figure><p>多条件升序、降序</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> 字段名<span class="number">1</span> <span class="keyword">FROM</span> 表名 <span class="keyword">ORDER</span> <span class="keyword">BY</span> 字段名<span class="number">1</span> <span class="keyword">asc</span>，字段名<span class="number">2</span> <span class="keyword">asc</span>；<span class="operator">/</span><span class="operator">/</span>字段<span class="number">1</span>起主导作用，如果字段<span class="number">1</span>相同就会使用字段名<span class="number">2</span>来进行升降序。</span><br></pre></td></tr></table></figure><p>根据字段位置进行排序</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT 字段名1  FROM 表名 ORDER BY 2  该方法作为了解，在开发中不适用，如果列发生变化，该sql就废了</span><br></pre></td></tr></table></figure><p>注：在综合案例中，排序总是在最后执行。</p><h4 id="10-数据处理函数"><a href="#10-数据处理函数" class="headerlink" title="10.数据处理函数"></a>10.数据处理函数</h4><p>数据处理函数又分为单行处理函数和多行处理函数。</p><p>单行处理函数：一个输入对应一个输出。</p><p>多行处理函数：多个输入，对应一个输出。</p><p>单行常见的函数有： </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">lower 转换小写</span><br><span class="line"></span><br><span class="line">upper  转换大写</span><br><span class="line"></span><br><span class="line">substr 取子串 (substr(被截取的字符串，起始下标，截取的长度))</span><br><span class="line">注：起始下标从1开始，没有0</span><br><span class="line">length取长度</span><br><span class="line"></span><br><span class="line">trim去空格</span><br><span class="line"></span><br><span class="line">str_to_data 将字符串转换成日期</span><br><span class="line"></span><br><span class="line">data_format 格式化日期</span><br><span class="line"></span><br><span class="line">format 设置千分位</span><br><span class="line"></span><br><span class="line">rand()生成随机数</span><br><span class="line"></span><br><span class="line">ifnull 可以将null转换成一个具体值</span><br><span class="line">null只要参数运算，最终结果一定是null，为了避免情况，需要使用ifnull函数</span><br><span class="line"></span><br><span class="line">concat字符串 拼接</span><br><span class="line"></span><br><span class="line">case..when..then..when..then..else..end</span><br><span class="line"></span><br><span class="line">case 字段 when当什么时候，then做什么....when当什么时候 ... 其他...</span><br></pre></td></tr></table></figure><h4 id="11-分组函数（多行处理函数）"><a href="#11-分组函数（多行处理函数）" class="headerlink" title="11.分组函数（多行处理函数）"></a>11.分组函数（多行处理函数）</h4><p>多行处理函数，输入多行，输出一行。</p><p>​        count计数</p><p>​        count(具体字段)：标识统计该字段下所有不为NULL的元素的总数</p><p>​        count(*)：统计表中的总行数，只要有一行数据就count++，因为每一行记录不可能都为NULL，一行数据中只要有一列不为NULL，则这行数据就是有效的。</p><p>​        sum 求和</p><p>​        avg平均值</p><p>​        max最大值</p><p>​        min最小值</p><p>​    注：1.分组函数使用的时候，必须先进行分组才可以使用，如果没有分组，整张表是一组数据。</p><p>​            2.分组函数自动忽略null，不需要提前对null值进行处理。</p><p>​            3.分组函数不能只能使用在where子句中</p><h4 id="12-分组查询"><a href="#12-分组查询" class="headerlink" title="12.分组查询"></a>12.分组查询</h4><p>什么是分组查询？</p><p>需要先对一组数据进行分组，然后再对这组数据进行操作。</p><p>如：计算每个部门的工资和？计算每个岗位的平均薪资？找个每个工资岗位的最高薪资?</p><p>关键字的执行顺序：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> </span><br><span class="line">...</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">...</span><br><span class="line"><span class="keyword">where</span></span><br><span class="line">...</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span></span><br><span class="line">...</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span></span><br><span class="line">...</span><br><span class="line">注：以上关键字的顺序不能颠倒。</span><br><span class="line">执行顺序：</span><br><span class="line"><span class="number">1.</span><span class="keyword">from</span></span><br><span class="line"><span class="number">2.</span><span class="keyword">where</span></span><br><span class="line"><span class="number">3.</span><span class="keyword">group</span> <span class="keyword">by</span></span><br><span class="line"><span class="number">4.</span><span class="keyword">select</span></span><br><span class="line"><span class="number">5.</span><span class="keyword">order</span> <span class="keyword">by</span></span><br><span class="line">如果在一条<span class="keyword">select</span>语句中，如果有<span class="keyword">group</span> <span class="keyword">by</span>语句的话，<span class="keyword">select</span>后面只能跟：参与分组的字段名，以及分组函数，其他一律不能跟。</span><br><span class="line"></span><br><span class="line"><span class="keyword">having</span>:对分完组之后的数组进一步过滤，<span class="keyword">having</span>不能单独使用，<span class="keyword">having</span>不能代替<span class="keyword">where</span>，<span class="keyword">having</span>必须联合<span class="keyword">group</span> <span class="keyword">by</span>联合使用</span><br><span class="line">优化策略：<span class="keyword">where</span>和<span class="keyword">having</span>优先选择<span class="keyword">where</span>，<span class="keyword">where</span>完不成不了，选择<span class="keyword">having</span></span><br><span class="line"></span><br><span class="line">总结：</span><br><span class="line">单表查询的执行顺序：执行顺序不能颠倒</span><br><span class="line"><span class="number">1.</span><span class="keyword">from</span> 从某张表中查出数据</span><br><span class="line"><span class="number">2.</span><span class="keyword">where</span>经过<span class="keyword">where</span>条件筛选数据</span><br><span class="line"><span class="number">3.</span><span class="keyword">group</span> <span class="keyword">by</span> 这这些数据进行分组</span><br><span class="line"><span class="number">4.</span><span class="keyword">having</span> 分组之后可以继续使用<span class="keyword">having</span>进行过滤</span><br><span class="line"><span class="number">5.</span><span class="keyword">select</span> 查询出来</span><br><span class="line"><span class="number">6.</span><span class="keyword">order</span> <span class="keyword">by</span> 排序输出</span><br></pre></td></tr></table></figure><p>13.去除重复记录（去重）distinct</p><p>注：原数据库的数据不会被改动，只是查询的结果去重。    </p><p>distinct 字段只能出现在所有字段的前方，可以放在分组函数里边执行。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select  distinct 字段名 from emp；</span><br></pre></td></tr></table></figure><h4 id="13-连接查询"><a href="#13-连接查询" class="headerlink" title="13.连接查询"></a>13.连接查询</h4><h5 id="1-根据语法的年代分类："><a href="#1-根据语法的年代分类：" class="headerlink" title="1.根据语法的年代分类："></a>1.根据语法的年代分类：</h5><p>SQL92：1992年出现的语法</p><p>SQL99：1999年出现的语法</p><p>表的连接方式方式分类：</p><p>​                                        内连接</p><p>​                                                    等值连接                                                    </p><p>​                                                    非等值连接</p><p>​                                                    自连接</p><p>​                                        外连接</p><p>​                                                    左外连接</p><p>​                                                    右外连接</p><p>​                                        全连接（使用较少）</p><p>当两张表进行查询时，没有任何条件的限制，最终查询结果条数，是两张表的乘积，这种现象称为笛卡尔现象，这是一个数学现象。</p><p>怎么避免笛卡尔现象，在连接的时候加条件，满足这个条件的数据被筛选出来。</p><p>select emp.ename from emp,dept where emp.deptno = dept .deptno;  //SQL92语法效率较低</p><p>注：避免笛卡尔现象，表的连接次数越多效率越低，避免表的连接次数。</p><h5 id="2-内连接之等值连接"><a href="#2-内连接之等值连接" class="headerlink" title="2.内连接之等值连接"></a>2.内连接之等值连接</h5><p>内连接语法格式：select 字段名 from 表1 inner join 表 2 on 条件</p><p>此处的inner 可以省略。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select e.ename,d.deptno from emp e inner join dept d on e.deptno=d.deptno;</span><br></pre></td></tr></table></figure><h5 id="3-非等值连接"><a href="#3-非等值连接" class="headerlink" title="3.非等值连接"></a>3.非等值连接</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">select e.ename,e.sal,s.grade from emp e join salgrade s on e.sal between s.losal and s.hisal;</span><br><span class="line">注：on后边的条件不是一个等量关系。 </span><br></pre></td></tr></table></figure><h5 id="4-内连接之自连接"><a href="#4-内连接之自连接" class="headerlink" title="4.内连接之自连接"></a>4.内连接之自连接</h5><p>自连接的技巧：一张表看成两张表</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select a.ename,b.ename,b.empno from emp a join emp b on a.mgr = b.empno;</span><br></pre></td></tr></table></figure><h5 id="5-左外连接"><a href="#5-左外连接" class="headerlink" title="5.左外连接"></a>5.左外连接</h5><p>left outer join….on …. //outer 可以省略加上可读性较强</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select a.ename,b.ename from emp a left outer join emp b on a.mgr =b.empno;</span><br></pre></td></tr></table></figure><h5 id="6-右外连接："><a href="#6-右外连接：" class="headerlink" title="6.右外连接："></a>6.右外连接：</h5><p>right outer join….on…. </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select a.ename,b.ename from emp a right outer join emp b on a.mgr =b.empno;</span><br></pre></td></tr></table></figure><p>注：主表代表查询该主表的全部内容，</p><p>14.三张表、四张表的连接</p><p>语法格式：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">select </span><br><span class="line">     ....</span><br><span class="line">     from</span><br><span class="line">     a</span><br><span class="line">     join</span><br><span class="line">     b</span><br><span class="line">     on</span><br><span class="line">       a表与b表的连接条件</span><br><span class="line">     join </span><br><span class="line">     c</span><br><span class="line">     on</span><br><span class="line">       a表与c表的连接条件</span><br><span class="line">     left join </span><br><span class="line">     d</span><br><span class="line">     on</span><br><span class="line">       a表与d表的连接条件</span><br><span class="line"></span><br><span class="line">注：一条sql中内连接和外连接都可以混合出现。 </span><br></pre></td></tr></table></figure><h4 id="15-子查询"><a href="#15-子查询" class="headerlink" title="15.子查询"></a>15.子查询</h4><p> 什么是子查询，select语句中嵌套select语句，被嵌套的select的语句被称为子查询。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">语法：</span><br><span class="line">select</span><br><span class="line">（select语句）</span><br><span class="line">   from</span><br><span class="line">   （select语句）</span><br><span class="line">   where </span><br><span class="line">     （select语句）</span><br><span class="line">     </span><br><span class="line">where子句中的子查询：select ename,sal from emp where sal &gt;(select min(sal) from emp);</span><br><span class="line"></span><br><span class="line">from子句中的子查询：</span><br><span class="line">from后面的子查询可以将子查询结果当做一张临时表，属于一种编程思想。</span><br><span class="line">select t.job,s.grade,t.avg  from (select job,avg(sal) as avg from emp group by job) t join salgrade s on t.avg between s.losal and s.hisal;</span><br><span class="line"></span><br><span class="line">select子查询</span><br><span class="line">对于select子查询一次只能返回一条结果，如果返回多条就报错。</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="16-union合并查询结果集"><a href="#16-union合并查询结果集" class="headerlink" title="16.union合并查询结果集"></a>16.union合并查询结果集</h4><p>union的效率要高一些，对于表连接来说，每连接一次新表，每一次匹配的次数都是成倍的翻。但是union可以减少匹配的次数，在减少匹配次数的情况下，可以完成两个结果集的拼接。</p><h4 id="17-limit"><a href="#17-limit" class="headerlink" title="17.limit"></a>17.limit</h4><p>limit是将查询结果的一部分取出来，一般使用在分页查询当中。</p><p>完整用法：limit  startIndex，length    startIndex是起始下标，length是长度</p><p>缺省用法：limit 5；取前5代表的是长度</p><p>注:limit是在order by 之后执行的。</p><p>分页公式：limit (pageNo-1)*pageSize,pageSize</p><h4 id="18-表的创建（建表）"><a href="#18-表的创建（建表）" class="headerlink" title="18.表的创建（建表）"></a>18.表的创建（建表）</h4><h5 id="1-建表的语法格式"><a href="#1-建表的语法格式" class="headerlink" title="1.建表的语法格式"></a>1.建表的语法格式</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">create table 表名（</span><br><span class="line"></span><br><span class="line">字段名1 数据类型，</span><br><span class="line"></span><br><span class="line">字段名2 数据类型，</span><br><span class="line"></span><br><span class="line">字段名3 数据类型</span><br><span class="line"></span><br><span class="line">）;</span><br><span class="line">类名：建议以t_或tbl_开始，可读性较强</span><br><span class="line">字段名：见名知意</span><br><span class="line">表名和字段名都属于标识符</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="2-关于数据库的数据类型"><a href="#2-关于数据库的数据类型" class="headerlink" title="2.关于数据库的数据类型"></a>2.关于数据库的数据类型</h5><p>varchar（255）：可变长度的字符串，比较智能节省空间，会根据实际的数据长度动态分配空间。</p><p>char（255）：定长字符串，不管实际的数据长度是多少，分配固定长度的空间是存储数据。使用不恰当的时候可能会导致空间的浪费。</p><p>注：如果字符串是固定的位数可以选择char，如果不固定选择varchar，varchar是动态扩容的，效率低，char是固定的容量，缺点是会导致空间的浪费。</p><p>int（11）：等同于java中的int</p><p>bigint：等同于java中的lang</p><p>float：单精度浮点型数据</p><p>double :双精度浮点型</p><p>data：短日期类型</p><p>datatime：长日期类型</p><p>clob：字符大对象，最多可以存储4个g的字符串，超过255个字符都要选用clob大对象。</p><p>blob：二进制大对象，专门用来存储图片，视频等流媒体数据，插入图片，视频等类型的数据时候需要使用IO流。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">删除表的sql</span><br><span class="line">drop table if exists t_student2;</span><br><span class="line"></span><br><span class="line">drop  table  表名</span><br></pre></td></tr></table></figure><h4 id="19-插入数据-insert"><a href="#19-插入数据-insert" class="headerlink" title="19.插入数据   insert"></a>19.插入数据   insert</h4><p>语法格式：insert into 表名（字段名1，字段名2，字段名3 …）values （值1，值2，值3）;</p><p>字段名要和值一一对应，数量要对应，数据类型要对应</p>]]></content>
      
      
      <categories>
          
          <category> MYSQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MYSQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>逆向小程序</title>
      <link href="/2021/11/08/%E9%80%86%E5%90%91%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
      <url>/2021/11/08/%E9%80%86%E5%90%91%E5%B0%8F%E7%A8%8B%E5%BA%8F/</url>
      
        <content type="html"><![CDATA[<h2 id="前期准备"><a href="#前期准备" class="headerlink" title="前期准备"></a>前期准备</h2><p>蓝叠安卓模拟器：为什么要用模拟器呢?因为反编译小程序的包需要用到ROOT权限所以比较方便，废话不多说开整。</p><p>反编译工具：wxappUnpacker</p><p>ES文件管理器：用来寻找小程序的包</p><p>环境:node.js</p><p>在进行反编译小程序之前要搞清楚它的原理，首先使用安卓模拟器打开微信小程序之后，就会自动下载小程序的包，默认格式为wxapkg为后缀的文件，进入 /data/data/com.tencent.mm/MicroMsg/{数串}/appbrand/pkg/**这个目录下就可以看到，可以根据时间来判断哪个是你刚打开的小程序的包。</p><p><img src="/images/%E9%80%86%E5%90%91%E5%B0%8F%E7%A8%8B%E5%BA%8F1-2.png" alt="image-20211108210524903"></p><h2 id="实现的步骤"><a href="#实现的步骤" class="headerlink" title="实现的步骤"></a>实现的步骤</h2><p>1.打开安卓模拟器，下载微信、qq、ES文件管理器</p><p>2.打开你想要反编译的小程序</p><p>3.去这个目录/data/data/com.tencent.mm/MicroMsg/{数串}/appbrand/pkg/**找到要反编译的包，将包压缩成文件，通过qq文件传输到自己的电脑。</p><p>4.打开wxappUnpacker文件夹，cmd到当前文件夹执行以下命令</p><h3 id="第一步安装依赖包"><a href="#第一步安装依赖包" class="headerlink" title="第一步安装依赖包"></a>第一步安装依赖包</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">npm install esprima</span><br><span class="line">npm install css-tree</span><br><span class="line">npm install cssbeautify</span><br><span class="line">npm install vm2</span><br><span class="line">npm install uglify-es</span><br><span class="line">npm install js-beautify</span><br></pre></td></tr></table></figure><h3 id="第二步执行反编译操作命令"><a href="#第二步执行反编译操作命令" class="headerlink" title="第二步执行反编译操作命令"></a>第二步执行反编译操作命令</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node wuWxapkg.js D:\wxappUnpacker\_-1618246301_29.wxapkg</span><br></pre></td></tr></table></figure><p>执行成功的效果如下图：</p><p><img src="/images/%E9%80%86%E5%90%91%E5%B0%8F%E7%A8%8B%E5%BA%8F1-1.png" alt="image-20211108210453308"></p><h2 id="完结"><a href="#完结" class="headerlink" title="完结"></a>完结</h2><p>成功之后使用微信开发者工具直接打开文件夹即可，接下来就可以看到你想的东西就可以尽情的奔放了。</p>]]></content>
      
      
      <categories>
          
          <category> 爬虫 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 爬虫 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>selenium+phantomjs实现网页截屏</title>
      <link href="/2021/11/08/selenium+phantomjs%E5%AE%9E%E7%8E%B0%E7%BD%91%E9%A1%B5%E6%88%AA%E5%B1%8F/"/>
      <url>/2021/11/08/selenium+phantomjs%E5%AE%9E%E7%8E%B0%E7%BD%91%E9%A1%B5%E6%88%AA%E5%B1%8F/</url>
      
        <content type="html"><![CDATA[<h2 id="1-Maven环境"><a href="#1-Maven环境" class="headerlink" title="1.Maven环境"></a>1.Maven环境</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.seleniumhq.selenium&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;selenium-java&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;3.4.0&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;com.codeborne&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;phantomjsdriver&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.2.1&lt;/version&gt;</span><br><span class="line">    &lt;!-- this will _always_ be behind --&gt;</span><br><span class="line">    &lt;exclusions&gt;</span><br><span class="line">        &lt;exclusion&gt;</span><br><span class="line">            &lt;groupId&gt;org.seleniumhq.selenium&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;selenium-java&lt;/artifactId&gt;</span><br><span class="line">        &lt;/exclusion&gt;</span><br><span class="line">        &lt;exclusion&gt;</span><br><span class="line">            &lt;groupId&gt;org.seleniumhq.selenium&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;selenium-remote-driver&lt;/artifactId&gt;</span><br><span class="line">        &lt;/exclusion&gt;</span><br><span class="line">    &lt;/exclusions&gt;</span><br><span class="line">  &lt;/dependency&gt;</span><br></pre></td></tr></table></figure><h2 id="2-具体实现代码"><a href="#2-具体实现代码" class="headerlink" title="2.具体实现代码"></a>2.具体实现代码</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"> @Override</span><br><span class="line">    public GoodsScreenshotEntity detailsScreenshots(GoodsScreenshotEntity entity) &#123;</span><br><span class="line">        logger.info(&quot;截屏方法开始执行...&quot;);</span><br><span class="line">        //设置必要参数</span><br><span class="line">        DesiredCapabilities dcaps = new DesiredCapabilities();</span><br><span class="line">        //ssl证书支持</span><br><span class="line">        dcaps.setCapability(&quot;acceptSslCerts&quot;, true);</span><br><span class="line">        //截屏支持</span><br><span class="line">        dcaps.setCapability(&quot;takesScreenshot&quot;, true);</span><br><span class="line">        //css搜索支持</span><br><span class="line">        dcaps.setCapability(&quot;cssSelectorsEnabled&quot;, true);</span><br><span class="line">        //js支持</span><br><span class="line">        dcaps.setJavascriptEnabled(true);</span><br><span class="line">        //驱动支持（第二参数表明的是你的phantomjs引擎所在的路径）</span><br><span class="line">        dcaps.setCapability(PhantomJSDriverService.PHANTOMJS_EXECUTABLE_PATH_PROPERTY, &quot;/jessica/spider/phantomjs/phantomjs-2.1.1-linux-x86_64/bin/phantomjs&quot;);//windows/linux环境下phantomjs的路径</span><br><span class="line">        //创建无界面浏览器对象</span><br><span class="line">        PhantomJSDriver driver = new PhantomJSDriver(dcaps);</span><br><span class="line">        //设置隐性等待（作用于全局）</span><br><span class="line">        driver.manage().timeouts().implicitlyWait(1, TimeUnit.SECONDS);</span><br><span class="line">        long start = System.currentTimeMillis();</span><br><span class="line">        //打开页面</span><br><span class="line">        logger.info(&quot;截屏方法执行的url：&quot;+entity.getSource());</span><br><span class="line">        driver.get(entity.getSource());</span><br><span class="line">        try &#123;</span><br><span class="line">            Thread.sleep( 2000);</span><br><span class="line">        &#125; catch (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">//        JavascriptExecutor js = driver;</span><br><span class="line">//        for (int i = 0; i &lt; 33; i++) &#123;</span><br><span class="line">//            js.executeScript(&quot;window.scrollBy(0,1000)&quot;);</span><br><span class="line">//            //睡眠10s等js加载完成</span><br><span class="line">//            Thread.sleep(5 * 1000);</span><br><span class="line">//        &#125;</span><br><span class="line">        //指定了OutputType.FILE做为参数传递给getScreenshotAs()方法，其含义是将截取的屏幕以文件形式返回。</span><br><span class="line">        File srcFile = ((TakesScreenshot) driver).getScreenshotAs(OutputType.FILE);</span><br><span class="line">        String randomImgName = getRandomImgName(entity);</span><br><span class="line">        String objectName = entity.getMallId() + &quot;/&quot; + entity.getVersion() + &quot;/&quot; + randomImgName;</span><br><span class="line">        FileInputStream fis = null;</span><br><span class="line">        ByteArrayOutputStream byte1 = null;</span><br><span class="line">        try &#123;</span><br><span class="line">            fis = new FileInputStream(srcFile);</span><br><span class="line">            byte1 = new ByteArrayOutputStream(fis.available());</span><br><span class="line">            byte[] bytes = new byte[fis.available()];</span><br><span class="line">            int temp;</span><br><span class="line">            while ((temp = fis.read(bytes)) != -1) &#123;</span><br><span class="line">                byte1.write(bytes, 0, temp);</span><br><span class="line">            &#125;</span><br><span class="line">            final String url = ossService.screenshotsUploud(objectName, bytes);</span><br><span class="line">            if (url != null) &#123;</span><br><span class="line">                logger.info(&quot;返回的OSS外链&quot;+url);</span><br><span class="line">                entity.setScreenshot(url);</span><br><span class="line">                entity.setState(ImageState.ok);</span><br><span class="line">                entity.setUploaded(true);</span><br><span class="line">                entity.setDisable(true);</span><br><span class="line">                long time = (System.currentTimeMillis() - start) / (1000);</span><br><span class="line">                logger.info(&quot;截屏成功并上传OSS耗时&quot; + time + &quot;秒， ：&#123;&quot; + &quot;商城ID：&quot; + entity.getMallId() + &quot;&#125;[&quot; + &quot;ID：&quot; + entity.getId() + &quot;][&quot; + &quot;外链: &quot; + url + &quot;]&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            entity.setState(ImageState.fail);</span><br><span class="line">            entity.setUploaded(false);</span><br><span class="line">            long time = (System.currentTimeMillis() - start) / (1000);</span><br><span class="line">            logger.info(&quot;截屏失败耗时&quot; + time + &quot;秒， ：&#123;&quot; + &quot;商城ID：&quot; + entity.getMallId() + &quot;&#125;[&quot; + &quot;ID：&quot; + entity.getId() + &quot;]&quot;);</span><br><span class="line">        &#125;finally &#123;</span><br><span class="line">            try &#123;</span><br><span class="line">                fis.close();</span><br><span class="line">            &#125; catch (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            try &#123;</span><br><span class="line">                byte1.close();</span><br><span class="line">            &#125; catch (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        driver.quit();</span><br><span class="line">        return entity;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="3-OSS上传代码块"><a href="#3-OSS上传代码块" class="headerlink" title="3.OSS上传代码块"></a>3.OSS上传代码块</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">// Endpoint以杭州为例，其它Region请按实际情况填写。</span><br><span class="line">  final String endpoint =&quot;xxx&quot;;</span><br><span class="line">  // 阿里云主账号AccessKey拥有所有API的访问权限，风险很高。强烈建议您创建并使用RAM账号进行API访问或日常运维，请登录RAM控制台创建RAM账号。</span><br><span class="line">  final String accessKeyId =&quot;xxx&quot;;</span><br><span class="line">  final String accessKeySecret =&quot;xxx&quot;;</span><br><span class="line">  final String bucketName =&quot;xxx&quot;;</span><br><span class="line">  /**</span><br><span class="line">   * 截图上传</span><br><span class="line">   * @param objectName 上传的路径/图片名称</span><br><span class="line">   * @param bytes 上传的数据</span><br><span class="line">   * @return result 外链</span><br><span class="line">   */</span><br><span class="line">  public String screenshotsUploud(String objectName,byte[] bytes)&#123;</span><br><span class="line">      String result=null;</span><br><span class="line">      // 创建OSSClient实例。</span><br><span class="line">      OSS ossClient = new OSSClientBuilder().build(endpoint, accessKeyId, accessKeySecret);</span><br><span class="line">      ObjectMetadata obj= new ObjectMetadata();</span><br><span class="line">      obj.setContentType(&quot;image/jpg&quot;);</span><br><span class="line">      PutObjectRequest putObjectRequest = new PutObjectRequest(bucketName, objectName, new ByteArrayInputStream(bytes),obj);</span><br><span class="line">      ossClient.putObject(putObjectRequest);</span><br><span class="line">      Date expiration = new Date(System.currentTimeMillis() + 3600L * 1000 * 24 * 365 * 10);</span><br><span class="line">      URL url = ossClient.generatePresignedUrl(bucketName, objectName, expiration);</span><br><span class="line">      // 关闭OSSClient。</span><br><span class="line">      ossClient.shutdown();</span><br><span class="line">      return url.toString();</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 爬虫 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 爬虫 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GIT常用命令</title>
      <link href="/2021/11/07/GIT%E5%91%BD%E4%BB%A4/"/>
      <url>/2021/11/07/GIT%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<h2 id="1-本地库操作"><a href="#1-本地库操作" class="headerlink" title="1.本地库操作"></a>1.本地库操作</h2><p>本地库初始化，命令：git add</p><p>隐藏的文件查看命令：ls -lA</p><p>查看工作区和暂存区的状态：git states</p><p>将工作区的 新建或修改 的文件提交到暂存区：git add File文件名</p><p>将暂存区中的文件删除：git rm –cached 文件名</p><p>将暂存区的文件提交到本地库：git commit 文件名  || git commit  -m  “第一次提交” 文件名</p><p>总结:第一次提交文件需要先执行git add 文件名进行文件的追踪，如果更改文件内容后进行提交，add操作可执</p><p>行或也可不执行直接进行commit操作</p><h2 id="2-远程库操作"><a href="#2-远程库操作" class="headerlink" title="2.远程库操作"></a>2.远程库操作</h2><p>git remote  -v 查看远程仓库地址是否有别名</p><p>git remote add  仓库地址或者别名 </p><p>git push origin master 推送到分支</p><h2 id="3-ssh免密公私钥生成"><a href="#3-ssh免密公私钥生成" class="headerlink" title="3.ssh免密公私钥生成"></a>3.ssh免密公私钥生成</h2><p>ssh -keygen -t rsa -C <a href="mailto:&#49;&#49;&#48;&#x33;&#48;&#49;&#x31;&#x30;&#51;&#51;&#64;&#x71;&#x71;&#x2e;&#x63;&#x6f;&#109;">&#49;&#49;&#48;&#x33;&#48;&#49;&#x31;&#x30;&#51;&#51;&#64;&#x71;&#x71;&#x2e;&#x63;&#x6f;&#109;</a> 生成公钥私钥</p>]]></content>
      
      
      <categories>
          
          <category> GIT </category>
          
      </categories>
      
      
        <tags>
            
            <tag> GIT </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
