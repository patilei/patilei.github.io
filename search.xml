<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>MYSQL进阶复习</title>
      <link href="/2021/11/19/MYSQL%E8%BF%9B%E9%98%B6%E5%A4%8D%E4%B9%A0/"/>
      <url>/2021/11/19/MYSQL%E8%BF%9B%E9%98%B6%E5%A4%8D%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h4 id="1-什么是数据库？什么是数据管理系统-什么是SQL？它们之间的关系是什么？"><a href="#1-什么是数据库？什么是数据管理系统-什么是SQL？它们之间的关系是什么？" class="headerlink" title="1.什么是数据库？什么是数据管理系统?什么是SQL？它们之间的关系是什么？"></a>1.什么是数据库？什么是数据管理系统?什么是SQL？它们之间的关系是什么？</h4><p>数据库：DataBase，简称DB。按照一定格式存储数据的一些文件的组合。顾名思义：存储数据的仓库，实际上就是一堆文件。这些文件中存储了具有特定格式的数据。</p><p>数据库管理系统：DataBaseManagement，简称DBMS。专门用来管理数据中的数据，数据库管理系统可以对数据库中的数据进行增删改查。如MySql，Oracle，MS，SqlServer，DB2，sybase等…</p><p>SQL：结构化查询语句，程序员通过编写SQL语句，DBMS负责执行SQL语句，最终来完成数据库中的数据的增删改查操作.SQL是一套标准，可以应用到各种数据库管理系统中。</p><p>三者之间的关系：数据库管理系统使用SQL语句来对数据库执行增删改查操作。</p><p>DBMS—&gt;SQL—&gt;DB</p><h4 id="2-命令行开启Mysql服务和关闭服务"><a href="#2-命令行开启Mysql服务和关闭服务" class="headerlink" title="2.命令行开启Mysql服务和关闭服务"></a>2.命令行开启Mysql服务和关闭服务</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">net start MySQL 停止 net stop MySQL 停止</span><br></pre></td></tr></table></figure><h4 id="3-mysql常用命令行"><a href="#3-mysql常用命令行" class="headerlink" title="3.mysql常用命令行"></a>3.mysql常用命令行</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">退出mysql：exit</span><br><span class="line">查看有哪些数据库：show databases; 以英文分号结尾</span><br><span class="line">选择数据库：use test;</span><br><span class="line">创建数据库：create datebase 数据库名;</span><br><span class="line">查看数据库表:show tables;</span><br><span class="line">导入数据：source 路径</span><br><span class="line">查看表结构 describe缩写 desc 表名</span><br><span class="line">查看数据库版本号：select verson();</span><br><span class="line">查看当前数据库：select database();</span><br><span class="line">\c 终止一条sql语句的输入</span><br><span class="line">注：不区分大小，不见分号不执行</span><br></pre></td></tr></table></figure><h4 id="4-数据库中最基本的表单元是表：table，任何一张表都有行和列，行（row）数据记录、列（column）称为字段"><a href="#4-数据库中最基本的表单元是表：table，任何一张表都有行和列，行（row）数据记录、列（column）称为字段" class="headerlink" title="4.数据库中最基本的表单元是表：table，任何一张表都有行和列，行（row）数据记录、列（column）称为字段"></a>4.数据库中最基本的表单元是表：table，任何一张表都有行和列，行（row）数据记录、列（column）称为字段</h4><h4 id="5-SQL语句分类"><a href="#5-SQL语句分类" class="headerlink" title="5.SQL语句分类"></a>5.SQL语句分类</h4><p>DQL：数据查询语句 select </p><p>DML:数据操作语言 insert增，delete删，update改</p><p>DDL:数据定义语言，带create新建表、drop删除、alter修改</p><p>TCL：事物控制，事物提交 commit，事物回滚：rollback；</p><p>DCL：数据控制语言，授权grant、撤销权限revoke</p><h4 id="6-简单查询"><a href="#6-简单查询" class="headerlink" title="6.简单查询"></a>6.简单查询</h4><p>查询一个字段：select 和from是关键字</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select  字段名 from 表名;   </span><br></pre></td></tr></table></figure><p>查询多个字段： 查询字段之间使用,来隔开</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select   cloumn1，cloumn2 from 表名;  </span><br></pre></td></tr></table></figure><p>查询所有字段：第2种方式可读性较差，效率低，不可取，*在运行的时候也会转换为字段。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1.select 字段名1,字段名2 from 表名</span><br><span class="line">2.select * from 表名</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> MYSQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MYSQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>逆向小程序</title>
      <link href="/2021/11/08/%E9%80%86%E5%90%91%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
      <url>/2021/11/08/%E9%80%86%E5%90%91%E5%B0%8F%E7%A8%8B%E5%BA%8F/</url>
      
        <content type="html"><![CDATA[<h2 id="前期准备"><a href="#前期准备" class="headerlink" title="前期准备"></a>前期准备</h2><p>蓝叠安卓模拟器：为什么要用模拟器呢?因为反编译小程序的包需要用到ROOT权限所以比较方便，废话不多说开整。</p><p>反编译工具：wxappUnpacker</p><p>ES文件管理器：用来寻找小程序的包</p><p>环境:node.js</p><p>在进行反编译小程序之前要搞清楚它的原理，首先使用安卓模拟器打开微信小程序之后，就会自动下载小程序的包，默认格式为wxapkg为后缀的文件，进入 /data/data/com.tencent.mm/MicroMsg/{数串}/appbrand/pkg/**这个目录下就可以看到，可以根据时间来判断哪个是你刚打开的小程序的包。</p><p><img src="/images/%E9%80%86%E5%90%91%E5%B0%8F%E7%A8%8B%E5%BA%8F1-2.png" alt="image-20211108210524903"></p><h2 id="实现的步骤"><a href="#实现的步骤" class="headerlink" title="实现的步骤"></a>实现的步骤</h2><p>1.打开安卓模拟器，下载微信、qq、ES文件管理器</p><p>2.打开你想要反编译的小程序</p><p>3.去这个目录/data/data/com.tencent.mm/MicroMsg/{数串}/appbrand/pkg/**找到要反编译的包，将包压缩成文件，通过qq文件传输到自己的电脑。</p><p>4.打开wxappUnpacker文件夹，cmd到当前文件夹执行以下命令</p><h3 id="第一步安装依赖包"><a href="#第一步安装依赖包" class="headerlink" title="第一步安装依赖包"></a>第一步安装依赖包</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">npm install esprima</span><br><span class="line">npm install css-tree</span><br><span class="line">npm install cssbeautify</span><br><span class="line">npm install vm2</span><br><span class="line">npm install uglify-es</span><br><span class="line">npm install js-beautify</span><br></pre></td></tr></table></figure><h3 id="第二步执行反编译操作命令"><a href="#第二步执行反编译操作命令" class="headerlink" title="第二步执行反编译操作命令"></a>第二步执行反编译操作命令</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node wuWxapkg.js D:\wxappUnpacker\_-1618246301_29.wxapkg</span><br></pre></td></tr></table></figure><p>执行成功的效果如下图：</p><p><img src="/images/%E9%80%86%E5%90%91%E5%B0%8F%E7%A8%8B%E5%BA%8F1-1.png" alt="image-20211108210453308"></p><h2 id="完结"><a href="#完结" class="headerlink" title="完结"></a>完结</h2><p>成功之后使用微信开发者工具直接打开文件夹即可，接下来就可以看到你想的东西就可以尽情的奔放了。</p>]]></content>
      
      
      <categories>
          
          <category> 爬虫 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 爬虫 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>selenium+phantomjs实现网页截屏</title>
      <link href="/2021/11/08/selenium+phantomjs%E5%AE%9E%E7%8E%B0%E7%BD%91%E9%A1%B5%E6%88%AA%E5%B1%8F/"/>
      <url>/2021/11/08/selenium+phantomjs%E5%AE%9E%E7%8E%B0%E7%BD%91%E9%A1%B5%E6%88%AA%E5%B1%8F/</url>
      
        <content type="html"><![CDATA[<h2 id="1-Maven环境"><a href="#1-Maven环境" class="headerlink" title="1.Maven环境"></a>1.Maven环境</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.seleniumhq.selenium&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;selenium-java&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;3.4.0&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;com.codeborne&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;phantomjsdriver&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.2.1&lt;/version&gt;</span><br><span class="line">    &lt;!-- this will _always_ be behind --&gt;</span><br><span class="line">    &lt;exclusions&gt;</span><br><span class="line">        &lt;exclusion&gt;</span><br><span class="line">            &lt;groupId&gt;org.seleniumhq.selenium&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;selenium-java&lt;/artifactId&gt;</span><br><span class="line">        &lt;/exclusion&gt;</span><br><span class="line">        &lt;exclusion&gt;</span><br><span class="line">            &lt;groupId&gt;org.seleniumhq.selenium&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;selenium-remote-driver&lt;/artifactId&gt;</span><br><span class="line">        &lt;/exclusion&gt;</span><br><span class="line">    &lt;/exclusions&gt;</span><br><span class="line">  &lt;/dependency&gt;</span><br></pre></td></tr></table></figure><h2 id="2-具体实现代码"><a href="#2-具体实现代码" class="headerlink" title="2.具体实现代码"></a>2.具体实现代码</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"> @Override</span><br><span class="line">    public GoodsScreenshotEntity detailsScreenshots(GoodsScreenshotEntity entity) &#123;</span><br><span class="line">        logger.info(&quot;截屏方法开始执行...&quot;);</span><br><span class="line">        //设置必要参数</span><br><span class="line">        DesiredCapabilities dcaps = new DesiredCapabilities();</span><br><span class="line">        //ssl证书支持</span><br><span class="line">        dcaps.setCapability(&quot;acceptSslCerts&quot;, true);</span><br><span class="line">        //截屏支持</span><br><span class="line">        dcaps.setCapability(&quot;takesScreenshot&quot;, true);</span><br><span class="line">        //css搜索支持</span><br><span class="line">        dcaps.setCapability(&quot;cssSelectorsEnabled&quot;, true);</span><br><span class="line">        //js支持</span><br><span class="line">        dcaps.setJavascriptEnabled(true);</span><br><span class="line">        //驱动支持（第二参数表明的是你的phantomjs引擎所在的路径）</span><br><span class="line">        dcaps.setCapability(PhantomJSDriverService.PHANTOMJS_EXECUTABLE_PATH_PROPERTY, &quot;/jessica/spider/phantomjs/phantomjs-2.1.1-linux-x86_64/bin/phantomjs&quot;);//windows/linux环境下phantomjs的路径</span><br><span class="line">        //创建无界面浏览器对象</span><br><span class="line">        PhantomJSDriver driver = new PhantomJSDriver(dcaps);</span><br><span class="line">        //设置隐性等待（作用于全局）</span><br><span class="line">        driver.manage().timeouts().implicitlyWait(1, TimeUnit.SECONDS);</span><br><span class="line">        long start = System.currentTimeMillis();</span><br><span class="line">        //打开页面</span><br><span class="line">        logger.info(&quot;截屏方法执行的url：&quot;+entity.getSource());</span><br><span class="line">        driver.get(entity.getSource());</span><br><span class="line">        try &#123;</span><br><span class="line">            Thread.sleep( 2000);</span><br><span class="line">        &#125; catch (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">//        JavascriptExecutor js = driver;</span><br><span class="line">//        for (int i = 0; i &lt; 33; i++) &#123;</span><br><span class="line">//            js.executeScript(&quot;window.scrollBy(0,1000)&quot;);</span><br><span class="line">//            //睡眠10s等js加载完成</span><br><span class="line">//            Thread.sleep(5 * 1000);</span><br><span class="line">//        &#125;</span><br><span class="line">        //指定了OutputType.FILE做为参数传递给getScreenshotAs()方法，其含义是将截取的屏幕以文件形式返回。</span><br><span class="line">        File srcFile = ((TakesScreenshot) driver).getScreenshotAs(OutputType.FILE);</span><br><span class="line">        String randomImgName = getRandomImgName(entity);</span><br><span class="line">        String objectName = entity.getMallId() + &quot;/&quot; + entity.getVersion() + &quot;/&quot; + randomImgName;</span><br><span class="line">        FileInputStream fis = null;</span><br><span class="line">        ByteArrayOutputStream byte1 = null;</span><br><span class="line">        try &#123;</span><br><span class="line">            fis = new FileInputStream(srcFile);</span><br><span class="line">            byte1 = new ByteArrayOutputStream(fis.available());</span><br><span class="line">            byte[] bytes = new byte[fis.available()];</span><br><span class="line">            int temp;</span><br><span class="line">            while ((temp = fis.read(bytes)) != -1) &#123;</span><br><span class="line">                byte1.write(bytes, 0, temp);</span><br><span class="line">            &#125;</span><br><span class="line">            final String url = ossService.screenshotsUploud(objectName, bytes);</span><br><span class="line">            if (url != null) &#123;</span><br><span class="line">                logger.info(&quot;返回的OSS外链&quot;+url);</span><br><span class="line">                entity.setScreenshot(url);</span><br><span class="line">                entity.setState(ImageState.ok);</span><br><span class="line">                entity.setUploaded(true);</span><br><span class="line">                entity.setDisable(true);</span><br><span class="line">                long time = (System.currentTimeMillis() - start) / (1000);</span><br><span class="line">                logger.info(&quot;截屏成功并上传OSS耗时&quot; + time + &quot;秒， ：&#123;&quot; + &quot;商城ID：&quot; + entity.getMallId() + &quot;&#125;[&quot; + &quot;ID：&quot; + entity.getId() + &quot;][&quot; + &quot;外链: &quot; + url + &quot;]&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            entity.setState(ImageState.fail);</span><br><span class="line">            entity.setUploaded(false);</span><br><span class="line">            long time = (System.currentTimeMillis() - start) / (1000);</span><br><span class="line">            logger.info(&quot;截屏失败耗时&quot; + time + &quot;秒， ：&#123;&quot; + &quot;商城ID：&quot; + entity.getMallId() + &quot;&#125;[&quot; + &quot;ID：&quot; + entity.getId() + &quot;]&quot;);</span><br><span class="line">        &#125;finally &#123;</span><br><span class="line">            try &#123;</span><br><span class="line">                fis.close();</span><br><span class="line">            &#125; catch (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            try &#123;</span><br><span class="line">                byte1.close();</span><br><span class="line">            &#125; catch (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        driver.quit();</span><br><span class="line">        return entity;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="3-OSS上传代码块"><a href="#3-OSS上传代码块" class="headerlink" title="3.OSS上传代码块"></a>3.OSS上传代码块</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">// Endpoint以杭州为例，其它Region请按实际情况填写。</span><br><span class="line">  final String endpoint =&quot;xxx&quot;;</span><br><span class="line">  // 阿里云主账号AccessKey拥有所有API的访问权限，风险很高。强烈建议您创建并使用RAM账号进行API访问或日常运维，请登录RAM控制台创建RAM账号。</span><br><span class="line">  final String accessKeyId =&quot;xxx&quot;;</span><br><span class="line">  final String accessKeySecret =&quot;xxx&quot;;</span><br><span class="line">  final String bucketName =&quot;xxx&quot;;</span><br><span class="line">  /**</span><br><span class="line">   * 截图上传</span><br><span class="line">   * @param objectName 上传的路径/图片名称</span><br><span class="line">   * @param bytes 上传的数据</span><br><span class="line">   * @return result 外链</span><br><span class="line">   */</span><br><span class="line">  public String screenshotsUploud(String objectName,byte[] bytes)&#123;</span><br><span class="line">      String result=null;</span><br><span class="line">      // 创建OSSClient实例。</span><br><span class="line">      OSS ossClient = new OSSClientBuilder().build(endpoint, accessKeyId, accessKeySecret);</span><br><span class="line">      ObjectMetadata obj= new ObjectMetadata();</span><br><span class="line">      obj.setContentType(&quot;image/jpg&quot;);</span><br><span class="line">      PutObjectRequest putObjectRequest = new PutObjectRequest(bucketName, objectName, new ByteArrayInputStream(bytes),obj);</span><br><span class="line">      ossClient.putObject(putObjectRequest);</span><br><span class="line">      Date expiration = new Date(System.currentTimeMillis() + 3600L * 1000 * 24 * 365 * 10);</span><br><span class="line">      URL url = ossClient.generatePresignedUrl(bucketName, objectName, expiration);</span><br><span class="line">      // 关闭OSSClient。</span><br><span class="line">      ossClient.shutdown();</span><br><span class="line">      return url.toString();</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 爬虫 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 爬虫 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GIT常用命令</title>
      <link href="/2021/11/07/GIT%E5%91%BD%E4%BB%A4/"/>
      <url>/2021/11/07/GIT%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<h2 id="1-本地库操作"><a href="#1-本地库操作" class="headerlink" title="1.本地库操作"></a>1.本地库操作</h2><p>本地库初始化，命令：git add</p><p>隐藏的文件查看命令：ls -lA</p><p>查看工作区和暂存区的状态：git states</p><p>将工作区的 新建或修改 的文件提交到暂存区：git add File文件名</p><p>将暂存区中的文件删除：git rm –cached 文件名</p><p>将暂存区的文件提交到本地库：git commit 文件名  || git commit  -m  “第一次提交” 文件名</p><p>总结:第一次提交文件需要先执行git add 文件名进行文件的追踪，如果更改文件内容后进行提交，add操作可执</p><p>行或也可不执行直接进行commit操作</p><h2 id="2-远程库操作"><a href="#2-远程库操作" class="headerlink" title="2.远程库操作"></a>2.远程库操作</h2><p>git remote  -v 查看远程仓库地址是否有别名</p><p>git remote add  仓库地址或者别名 </p><p>git push origin master 推送到分支</p><h2 id="3-ssh免密公私钥生成"><a href="#3-ssh免密公私钥生成" class="headerlink" title="3.ssh免密公私钥生成"></a>3.ssh免密公私钥生成</h2><p>ssh -keygen -t rsa -C <a href="mailto:&#49;&#49;&#48;&#x33;&#48;&#49;&#x31;&#x30;&#51;&#51;&#64;&#x71;&#x71;&#x2e;&#x63;&#x6f;&#109;">&#49;&#49;&#48;&#x33;&#48;&#49;&#x31;&#x30;&#51;&#51;&#64;&#x71;&#x71;&#x2e;&#x63;&#x6f;&#109;</a> 生成公钥私钥</p>]]></content>
      
      
      <categories>
          
          <category> GIT </category>
          
      </categories>
      
      
        <tags>
            
            <tag> GIT </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
